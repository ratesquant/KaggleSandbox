#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jan 11 16:27:39 2020
"""
#pip install 'kaggle-environments>=0.1.6'
import os
import cProfile
import json
from kaggle_environments import evaluate, make, utils
import numpy as np
from time import time
from random import choice

#DATA_FOLDER = os.getenv('HOME') + '/source/github/KaggleSandbox/connect_x/' 
DATA_FOLDER = 'D:/Github/KaggleSandbox/connect_x/submission/'

env = make("connectx", debug=True)
#env.render()

from kaggle_environments.utils import structify
#board = obs.board
config = env.configuration    
columns = config.columns
rows = config.rows
size = rows * columns   

def play_moves(moves, board, config):    
    columns = config.columns
    rows = config.rows
    mark = 1
    for c in moves:  
        column = int(c)-1
        row = max([r for r in range(rows) if board[column + (r * columns)] == 0])
        board[column + (row * columns)] = mark
        mark = 3 - mark
    return mark

def print_board(board):
    for r in range(rows):
        print('-'.join([str(board[c + (r * columns)]) for c in range(columns)]) )


#timing 2 sec per turn + 60 sec or exceedance total (2.5)
# on average 4.5 /sec

#%%
#An Agent must return an action within 8 seconds (24 seconds on the first turn) of being invoked. If the Agent does not, it will lose the episode and may be invalidated 

#debut_hashtable = {7551510705482241731: 3, 522120584338709296: 3, -1240559124920122598: 2, 3945848622772750764: 3, 2015441730067367180: 3, -5064514122604784884: 3, 7551529572239210266: 4, 7551510705486626776: 3, 6403405561489853926: 3, 2878046142972190138: 1, -5195882435351614754: 5, 170665929465627438: 3, -4769863852397134434: 1, 2015403996553430110: 1, 2015441730076137270: 3, -7442728726238249925: 3, 1939584291861271111: 3, -6944355283781548839: 3, -6636997061359620615: 3, 2066007461595986809: 3, 7896707840461543275: 3, 7896726707214126765: 2, -1921229493549496057: 2, 5218075775768867211: 1, -7920070485840169229: 2, -6939910057795817729: 3, 140045794876334335: 2, 5970746173741890801: 2, 5970765040494474291: 2, -5009503165090434145: 3, 5503547797637329605: 2, 8386018973915889533: 3, 5489735500030028277: 3, -7126308194813966873: 3, -7126289328061383383: 3, 4213413759151844105: 3, 2450734049893012211: 2, 7637141797585885573: 1, 867522827516547439: 3, -5660053316156897563: 2, 170647062708658903: 4, 170665929461242393: 3, 4000859580287101503: 3, -1050362354416126435: 4, -2868312441804999713: 4, 2310073133518049095: 3, 2310092000270632585: 3, -6263203864882760853: 1, 5544727590787410481: 4, -2839475826448719385: 4, -4769882719154102969: 3, -1324444431304690735: 4, -1445310320671913829: 5, 766223989770323607: 4, -8615165247804310157: 3, 4780356891202013521: 3, -3520608378594923881: 3, 2989904108280006673: 3}
#debut_hashtable = {7551510705482241731: 3, 522120584338709296: 3, -1240559124920122598: 2, 3945848622772750764: 3, 2015441730067367180: 3, -5064514122604784884: 3, 7551529572239210266: 4, 7551510705486626776: 3, 6403405561489853926: 3, 2878046142972190138: 1, -5195882435351614754: 5, 170665929465627438: 3, -4769863852397134434: 1, 2015403996553430110: 1, 2015441730076137270: 3, -7442728726238249925: 3, 1939584291861271111: 3, -6944355283781548839: 3, -6636997061359620615: 3, 2066007461595986809: 3, 7896707840461543275: 3, 7896726707214126765: 2, -1921229493549496057: 2, 5218075775768867211: 1, -7920070485840169229: 2, -6939910057795817729: 3, 140045794876334335: 2, 5970746173741890801: 2, 5970765040494474291: 2, -5009503165090434145: 3, 5503547797637329605: 2, 8386018973915889533: 3, 5489735500030028277: 3, -7126308194813966873: 3, -7126289328061383383: 3, 4213413759151844105: 3, 2450734049893012211: 2, 7637141797585885573: 1, 867522827516547439: 3, -5660053316156897563: 2, 170647062708658903: 4, 170665929461242393: 3, 4000859580287101503: 3, -1050362354416126435: 4, -2868312441804999713: 4, 2310073133518049095: 3, 2310092000270632585: 3, -6263203864882760853: 1, 5544727590787410481: 4, -2839475826448719385: 4, -4769882719154102969: 3, -1324444431304690735: 4, -1445310320671913829: 5, 766223989770323607: 4, -8615165247804310157: 3, 4780356891202013521: 3, -3520608378594923881: 3, 2989904108280006673: 3, 6149297199769643935: 3, 8192387988068780307: 3, -3905636333126612333: 3, 7317678751773469919: 3, -4331654916081092653: 3, 7329745841650020279: 3, 7329783575155187259: 2, 1318999689705203: 1, -8273273632376196885: 3, 1099470507876554475: 0, -6231420632334521285: 1, 673451924922074155: 3, -6111891391056364529: 3, -6111853657551197549: 3, -4832033213557684291: 2, -8357392632075348079: 3, 1617028875570520981: 2, 7381971228127640837: 3, 1589404280355918325: 4, 4803753874864009757: 6, -5195901302099813199: 5, 5255486658939034185: 4, 4918414611724481: 3, -6343801337902434495: 2, -7014627596253444595: 3, -5917782754947954175: 3, 867560561030484509: 3, 867522827525317529: 2, 1898168099452737085: 1, -2269965435620087995: 0, 4721528433449232273: 2, -4334571532571489403: 3, 3081208710460422481: 0, -7365890907236360979: 3, -7365928640741527959: 0, 8683511415431175769: 3, 4515377880358350689: 2, -6939872324281880659: 1, 2450771783406949281: 2, -127445569856681799: 2, 4295472116989584973: 2, 2079215330827877555: 3, -4269504421686281421: 3, -6741101490522365041: 3, -3843485838731801101: 3, 2941857477246637583: 2, -2483861622713052925: 2, 2630785763314309026: 0, 4056721317670677104: 3, 5545597237413603878: 3, -8113070563140919968: 4, -3464765507963931770: 3, 9151278186880063380: 4, 9151259320127479890: 2, -7018167607033248174: 3, -7208385419399906186: 1, 4640912093672590096: 1, 2227995908932109782: 1, -3602704469933446684: 0, -3602723336686030174: 3, 7174369780710086952: 2, 6129788013415516870: 2, 739119989189183008: 2, -5091580389676373458: 2, -5091599256428956948: 0, -6289458019865129642: 2, -6665244052307498882: 3, 2218695523335321068: 2, 1656524184731585932: 5, -6791667222042214580: 3, 5824376472801780570: 3, 5824357606049197080: 2, -2880574731962018778: 4, -8166535531677655222: 3, 3918782355701162190: 3, 3918763488948578700: 3, -8711275110827575244: 3, 3150041192968515034: 3, -8697280205895416450: 3, -3928936388764829534: 4, 5453376629334691502: 3, 5413483498606720772: 4, 8295954674885280700: 4, -1447784875868663492: 2, 4382915502996892974: 2, 6505501891963273852: 4, 5960849884817029792: 2, -8922296174179600862: 1, -4855994394461726198: 1, 7403823194457909158: 2, 323867341785757094: 0, -5506833037079799372: 0, -5506851903832382862: 2, -5199206821664156606: 1, -7026290204344528274: 2, 799634170626516566: 2, -180526257417834934: 2, -7260482110089986998: 2, 5355561584754008152: 1, 5355542718001424662: 1, -6098290426844366710: 2, -5408047246654208714: 2, 5771699314856433396: 1, -1079609862598045038: 1, -8159565715270197102: 2, 4456477979573798048: 1, 4456459112821214558: 2, -5277978526694522602: 3, 1861326742623840666: 3, 7169924554724355842: 3, 5798778872508144600: 2, 1070129130096555278: 3, -4760571248769001188: 2, -4760590115521584678: 2, 7463172611104120362: 2, -6917269682887556590: 2, -4694813222460564578: 1, 6114663941272787852: 4, -3445557748653968980: 2, -3445576615406552470: 2, 1632472232238563896: 2, 5698774011956438560: 2, 7921230472383430572: 3, -688939492868952348: 1, 2385123763459003996: 2, 1632453365485980406: 2, 5698755145203855070: 2, 7921211605630847082: 3, 8033069570943048662: 2, -69080150081542918: 3, 5239517662018972258: 3, -6856744523085256264: 3, -4721091548019595474: 3, 7894952146824399676: 2, 7894933280071816186: 1, -1075164636612313928: 3, -3010016755303428622: 1, -7325355053699424278: 3, 2041205179399799316: 3, 4937488653285660572: 2, -893211725579895894: 3, -893230592332479384: 3, 283843404644206374: 3, 2452594163068874384: 3, 5080252223165627400: 2, 8231348813233295568: 3, 2400648434367739102: 3, 2400629567615155612: 3, -5259721003101490164: 3, -6304302770396060246: 2, 6856480503597854926: 3, 7342510394135203658: 2, 7342491527382620168: 2, 7356322691742504986: 3, 6311740924447934904: 3, -273686845465526434: 3, -5273552167461374982: 2, 7356303824989921496: 3, 6311722057695351414: 2, 8448322218346474576: 2, 1314855460079424358: 3, -4060023994327126738: 2, 9200312331689551516: 1, -9193886635779878788: 2, 4050763371722783036: 3, -1779937007142773430: 2, -1779955873895356920: 3, -2390457696063591072: 1, 4748847573254772196: 1, -8389298688354264244: 3, -7461557453508533654: 3, -5841487443405964000: 5, 6774556251438031150: 4, 6774537384685447660: 3, 7389368647769890354: 1, 9152048357028722248: 0, 3965640609335848886: 1, -1717382246053086286: 0, -1183908350630919594: 2, -7014608729496476060: 4, -7014627596249059550: 1, -1191286903516200576: 2, -7190127895806873748: 2, -513082092279909494: 2, -5799042891995545938: 4, 1551289716019052906: 6, 1551270849266469416: 5, -7448005865336237362: 3, -4334552665814520868: 3, -4024277826902195894: 3, -5917763888190985640: 4, 7243019385802929532: 3, -2630112321125390338: 3, 6955952645177545562: 3, -3542635583154188814: 2, 1643772164538684548: 1, -5151138806089277076: 4, 6793321124505453028: 5, -5822722570338542122: 4, -6686778472829477012: 3, -9079442895459078566: 1, 2579636805246759704: 1, -2706323994468876740: 3, -1541429181507616292: 3, -1541448048260199782: 1, -2679750430217321168: 3, -4614602548908435862: 3, -6103478468651362636: 4, -7179985158981817418: 0, 3073239848184071164: 3, -2923816102139383454: 3, -2923834968891966944: 3, -6730568302910233998: 3, -1270356765701455516: 3, 8292447732365276150: 2, 7416765343779518978: 3, -9080306419677913502: 3, -6974633974832296284: 3, -6974652841584879774: 3, -3124640403884081064: 3, -8410601203599717508: 3, 8736675899912009214: 3, 4162829160870640986: 0, -3124659270636664554: 4, -8410620070352300998: 3, -988059109985541392: 2, -7716013731970803448: 2, 3892000763217346490: 1, -8396241370344704162: 4, -6465834477639320578: 3, -8728232154481047416: 1, 1570589038109830246: 1, 6444802887145804462: 0, 8099908141463712688: 2, 4097204525921731672: 1, 1150820684512007432: 0, 3081227577217391016: 3, 3782885091829741580: 4, -5528942388034991904: 4, -2454879131707035560: 0, -1962632515009709062: 1, -656738318451174902: 2, 3391502416129715990: 3, -6279655564643680170: 2, 2855261029201137962: 4, -2144604292794710586: 0, -8274436313410542976: 4, 7058854560777292146: 0, 6748579721864967172: 4, 8678986614570350756: 1, 7822569643531329136: 5, 5354414216088161616: 4, 3142879905645924180: 4, -4636133374489890054: 0, 2002679243549490228: 0, -8059861412923931522: 4, -6129454520218547938: 3, 419104788227582792: 4, 2528695346592540842: 4, 6781182844566577102: 0, -5568332331228752054: 2, -4075011185500094170: 4, 8561388692846828454: 4, -750438787017905030: 4, 7971589143546679470: 4, 3536581932632333094: 3, -3251082440371380252: 1, 4289252330605356684: 0, -8509545935620150266: 2, 3889505487358082386: 3, 8685914305879503412: 1, -7035751760716860356: 4, -1205051381851303890: 1, -7715563868726234444: 1, 2706041108228891912: 5, -3879386661684569426: 2, 4842641268880015074: 1, -6574693816929035572: 2, -3804471378646038642: 2, -5471560514889364468: 6}
#debut_hashtable = {7551510705482241731: 3, 522120584338709296: 3, -1240559124920122598: 2, 3945848622772750764: 3, 2015441730067367180: 3, -5064514122604784884: 3, 7551529572239210266: 4, 7551510705486626776: 3, 6403405561489853926: 3, 2878046142972190138: 1, -5195882435351614754: 5, 170665929465627438: 3, -4769863852397134434: 1, 2015403996553430110: 1, 2015441730076137270: 3, -7442728726238249925: 3, 1939584291861271111: 3, -6944355283781548839: 3, -6636997061359620615: 3, 2066007461595986809: 3, 7896707840461543275: 3, 7896726707214126765: 2, -1921229493549496057: 2, 5218075775768867211: 1, -7920070485840169229: 2, -6939910057795817729: 3, 140045794876334335: 2, 5970746173741890801: 2, 5970765040494474291: 2, -5009503165090434145: 3, 5503547797637329605: 2, 8386018973915889533: 3, 5489735500030028277: 3, -7126308194813966873: 3, -7126289328061383383: 3, 4213413759151844105: 3, 2450734049893012211: 2, 7637141797585885573: 1, 867522827516547439: 3, -5660053316156897563: 2, 170647062708658903: 4, 170665929461242393: 3, 4000859580287101503: 3, -1050362354416126435: 4, -2868312441804999713: 4, 2310073133518049095: 3, 2310092000270632585: 3, -6263203864882760853: 1, 5544727590787410481: 4, -2839475826448719385: 4, -4769882719154102969: 3, -1324444431304690735: 4, -1445310320671913829: 5, 766223989770323607: 4, -8615165247804310157: 3, 4780356891202013521: 3, -3520608378594923881: 3, 2989904108280006673: 3, 6149297199769643935: 3, 8192387988068780307: 3, -3905636333126612333: 3, 7317678751773469919: 3, -4331654916081092653: 3, 7329745841650020279: 3, 7329783575155187259: 2, 1318999689705203: 1, -8273273632376196885: 3, 1099470507876554475: 0, -6231420632334521285: 1, 673451924922074155: 3, -6111891391056364529: 3, -6111853657551197549: 3, -4832033213557684291: 2, -8357392632075348079: 3, 1617028875570520981: 2, 7381971228127640837: 3, 1589404280355918325: 4, 4803753874864009757: 6, -5195901302099813199: 5, 5255486658939034185: 4, 4918414611724481: 3, -6343801337902434495: 2, -7014627596253444595: 3, -5917782754947954175: 3, 867560561030484509: 3, 867522827525317529: 2, 1898168099452737085: 1, -2269965435620087995: 0, 4721528433449232273: 2, -4334571532571489403: 3, 3081208710460422481: 0, -7365890907236360979: 3, -7365928640741527959: 0, 8683511415431175769: 3, 4515377880358350689: 2, -6939872324281880659: 1, 2450771783406949281: 2, -127445569856681799: 2, 4295472116989584973: 2, 2079215330827877555: 3, -4269504421686281421: 3, -6741101490522365041: 3, -3843485838731801101: 3, 2941857477246637583: 2, -2483861622713052925: 2, 2630785763314309026: 0, 4056721317670677104: 3, 5545597237413603878: 3, -8113070563140919968: 4, -3464765507963931770: 3, 9151278186880063380: 4, 9151259320127479890: 2, -7018167607033248174: 3, -7208385419399906186: 1, 4640912093672590096: 1, 2227995908932109782: 1, -3602704469933446684: 0, -3602723336686030174: 3, 7174369780710086952: 2, 6129788013415516870: 2, 739119989189183008: 2, -5091580389676373458: 2, -5091599256428956948: 0, -6289458019865129642: 2, -6665244052307498882: 3, 2218695523335321068: 2, 1656524184731585932: 5, -6791667222042214580: 3, 5824376472801780570: 3, 5824357606049197080: 2, -2880574731962018778: 4, -8166535531677655222: 3, 3918782355701162190: 3, 3918763488948578700: 3, -8711275110827575244: 3, 3150041192968515034: 3, -8697280205895416450: 3, -3928936388764829534: 4, 5453376629334691502: 3, 5413483498606720772: 4, 8295954674885280700: 4, -1447784875868663492: 2, 4382915502996892974: 2, 6505501891963273852: 4, 5960849884817029792: 2, -8922296174179600862: 1, -4855994394461726198: 1, 7403823194457909158: 2, 323867341785757094: 0, -5506833037079799372: 0, -5506851903832382862: 2, -5199206821664156606: 1, -7026290204344528274: 2, 799634170626516566: 2, -180526257417834934: 2, -7260482110089986998: 2, 5355561584754008152: 1, 5355542718001424662: 1, -6098290426844366710: 2, -5408047246654208714: 2, 5771699314856433396: 1, -1079609862598045038: 1, -8159565715270197102: 2, 4456477979573798048: 1, 4456459112821214558: 2, -5277978526694522602: 3, 1861326742623840666: 3, 7169924554724355842: 3, 5798778872508144600: 2, 1070129130096555278: 3, -4760571248769001188: 2, -4760590115521584678: 2, 7463172611104120362: 2, -6917269682887556590: 2, -4694813222460564578: 1, 6114663941272787852: 4, -3445557748653968980: 2, -3445576615406552470: 2, 1632472232238563896: 2, 5698774011956438560: 2, 7921230472383430572: 3, -688939492868952348: 1, 2385123763459003996: 2, 1632453365485980406: 2, 5698755145203855070: 2, 7921211605630847082: 3, 8033069570943048662: 2, -69080150081542918: 3, 5239517662018972258: 3, -6856744523085256264: 3, -4721091548019595474: 3, 7894952146824399676: 2, 7894933280071816186: 1, -1075164636612313928: 3, -3010016755303428622: 1, -7325355053699424278: 3, 2041205179399799316: 3, 4937488653285660572: 2, -893211725579895894: 3, -893230592332479384: 3, 283843404644206374: 3, 2452594163068874384: 3, 5080252223165627400: 2, 8231348813233295568: 3, 2400648434367739102: 3, 2400629567615155612: 3, -5259721003101490164: 3, -6304302770396060246: 2, 6856480503597854926: 3, 7342510394135203658: 2, 7342491527382620168: 2, 7356322691742504986: 3, 6311740924447934904: 3, -273686845465526434: 3, -5273552167461374982: 2, 7356303824989921496: 3, 6311722057695351414: 2, 8448322218346474576: 2, 1314855460079424358: 3, -4060023994327126738: 2, 9200312331689551516: 1, -9193886635779878788: 2, 4050763371722783036: 3, -1779937007142773430: 2, -1779955873895356920: 3, -2390457696063591072: 1, 4748847573254772196: 1, -8389298688354264244: 3, -7461557453508533654: 3, -5841487443405964000: 5, 6774556251438031150: 4, 6774537384685447660: 3, 7389368647769890354: 1, 9152048357028722248: 0, 3965640609335848886: 1, -1717382246053086286: 0, -1183908350630919594: 2, -7014608729496476060: 4, -7014627596249059550: 1, -1191286903516200576: 2, -7190127895806873748: 2, -513082092279909494: 2, -5799042891995545938: 4, 1551289716019052906: 6, 1551270849266469416: 5, -7448005865336237362: 3, -4334552665814520868: 3, -4024277826902195894: 3, -5917763888190985640: 4, 7243019385802929532: 3, -2630112321125390338: 3, 6955952645177545562: 3, -3542635583154188814: 2, 1643772164538684548: 1, -5151138806089277076: 4, 6793321124505453028: 5, -5822722570338542122: 4, -6686778472829477012: 3, -9079442895459078566: 1, 2579636805246759704: 1, -2706323994468876740: 3, -1541429181507616292: 3, -1541448048260199782: 1, -2679750430217321168: 3, -4614602548908435862: 3, -6103478468651362636: 4, -7179985158981817418: 0, 3073239848184071164: 3, -2923816102139383454: 3, -2923834968891966944: 3, -6730568302910233998: 3, -1270356765701455516: 3, 8292447732365276150: 2, 7416765343779518978: 3, -9080306419677913502: 3, -6974633974832296284: 3, -6974652841584879774: 3, -3124640403884081064: 3, -8410601203599717508: 3, 8736675899912009214: 3, 4162829160870640986: 0, -3124659270636664554: 4, -8410620070352300998: 3, -988059109985541392: 2, -7716013731970803448: 2, 3892000763217346490: 1, -8396241370344704162: 4, -6465834477639320578: 3, -8728232154481047416: 1, 1570589038109830246: 1, 6444802887145804462: 0, 8099908141463712688: 2, 4097204525921731672: 1, 1150820684512007432: 0, 3081227577217391016: 3, 3782885091829741580: 4, -5528942388034991904: 4, -2454879131707035560: 0, -1962632515009709062: 1, -656738318451174902: 2, 3391502416129715990: 3, -6279655564643680170: 2, 2855261029201137962: 4, -2144604292794710586: 0, -8274436313410542976: 4, 7058854560777292146: 0, 6748579721864967172: 4, 8678986614570350756: 1, 7822569643531329136: 5, 5354414216088161616: 4, 3142879905645924180: 4, -4636133374489890054: 0, 2002679243549490228: 0, -8059861412923931522: 4, -6129454520218547938: 3, 419104788227582792: 4, 2528695346592540842: 4, 6781182844566577102: 0, -5568332331228752054: 2, -4075011185500094170: 4, 8561388692846828454: 4, -750438787017905030: 4, 7971589143546679470: 4, 3536581932632333094: 3, -3251082440371380252: 1, 4289252330605356684: 0, -8509545935620150266: 2, 3889505487358082386: 3, 8685914305879503412: 1, -7035751760716860356: 4, -1205051381851303890: 1, -7715563868726234444: 1, 2706041108228891912: 5, -3879386661684569426: 2, 4842641268880015074: 1, -6574693816929035572: 2, -3804471378646038642: 2, -5471560514889364468: 6, -2066284233484115908: 3, 9217169719209028140: 3, -1155645776176718584: 3, 367109145510596516: 4, -1581664359131198904: 3, -8366932208081763448: 3, -8366969941604470608: 3, 1401898135408706396: 3, 1782333760142022420: 3, -2570870390808144488: 4, 1356315177187542100: 3, -5428952671763022444: 3, -5428990405285729604: 3, -1141368910468519064: 3, 5503058187515660404: 0, -6717613401136262792: 3, 4943862823622724280: 3, 4943825090100017120: 3, 4061112498503641538: 4, 6999092034822382542: 3, -1074836543501422350: 3, 8919496949802485682: 4, -648817960546942030: 3, 6136449888403622514: 1, 6136487621926329674: 3, 5077039604561180084: 0, 3698633984697520492: 3, 5369881406577204600: 3, 5369843673054497440: 3, -1708228244389384460: 2, 6907363732042498912: 3, -6291632551704489632: 3, -1317178668341844110: 4, 725912119957292262: 2, 1924405964758187830: 4, -148797116338018126: 4, 6648613289516970918: 3, -136654559433593626: 2, 4108442751471293990: 4, 7288155549312056426: 1, 7281126832678809754: 4, -3723752565330489470: 1, -5407923037548574854: 1, -3297733982376009150: 1, 3487533866574555394: 1, 3487571600097262554: 1, 4859128596236764562: 4, -9028864048847376374: 3, 310559436430623458: 1, 483269588204765246: 4, 736578019385103778: 1, 7521845868335668322: 1, 7521883601858375482: 2, 8676259708512585634: 3, -2805810379581489786: 3, -6528899732096934042: 2, -763957379539814186: 1, -8003374078464517890: 2, -1218106229513953346: 3, -1218068495991246186: 3, -4932877609006515374: 3, 8490251876354835658: 0, -6094230444377094686: 1, 8916270459309315978: 1, -2745205765449671094: 1, -2745168031926963934: 0, 9011170651451005866: 3, -4887004262452404646: 1, -5059714414226546434: 3, -8252532811250860354: 3, 1472245003543679578: 5, 1472282737066386738: 0, -2650305573307981206: 1, 1898263586498159898: 5, 1725553434724018110: 1, 6985481515113712842: 0, -5312985111884177806: 0, -2650267839785274046: 1, 1898301320020867058: 3, 1725591168246725270: 1, 5982831036056037386: 4, -3944479275170929392: 6, -1901388486871793020: 3, -3187486706836178476: 6, 5062047710486222404: 3, 4873349848596846276: 4, 2483830357222591324: 2, -6788088642656973816: 3, 981082689406766908: 2, -3187050845666058172: 3, 7430144778534972180: 3, 5356941697438766224: 2, 2505252780548096500: 3, -7829874295881090660: 3, -9156185710705723592: 3, -1945190674453537964: 2, 3305377569873771740: 1, 7912483496704226872: 3, 4287548957570688524: 3, -8366628168367140580: 4, 6865766310834319604: 4, -1581322585911409056: 5, -5979914382594566962: 2, 7216261446787674950: 3, -6447711662061673594: 5, 196715435922505874: 6, 441523111319035654: 3, 3655872705827127086: 2, -6343782471136695870: 2, -7387625719217347794: 2, -2137057474890038090: 3, 7837364032755830970: 4, -4844437688396600790: 3, -3408470459629179566: 2, 1423331266070509774: 2, -2147624721877130318: 3, 4439885786317495804: 4, 7965245204835159592: 4, -8382626301397687020: 4, -2617683948840567164: 4, -1981551707596106812: 4, -6117026147933724764: 4, -4193213089523815628: 4, 4028645893844546380: 3, -1221922350482763324: 1, -7969036090736799964: 2, -2204093738179680108: 3, -7996660685951402620: 3, -5703435937272837708: 3, -5784999304023693804: 5, 6216167927963766288: 2, -6497933756243169472: 5, -149214003729010496: 3, -5571872182053406340: 2, -3260726200713586448: 2, -7360500435634055360: 3, -7360538169156762520: 2, -8316005918678504404: 0, 1833392426055419316: 3, -3767436758872363300: 2, -3020597217754386920: 1, -4193455341826843620: 1, 7468020882932143452: 1, 7467983149409436292: 1, -4023840086747078992: 3, -7549199505264742780: 3, -3748921663587634228: 3, 2152789731769993844: 2, 2397597407166523624: 1, -4387670441784040920: 3, -4387708175306748080: 2, -6105346077475573032: 2, -2579986658957909244: 1, 5493941919365895648: 2, -2354197742430066732: 3, 5067923336411415328: 1, -1717344512539149216: 5, -1717382246061856376: 2, -668095923309179832: 1, 6179360153558903104: 1, 4627312777614937652: 4, 514944687698505564: 0, -179889112437181120: 3, -179926845959888280: 3, -7453363772259744376: 0, -605907695391661440: 0, -2157955071335626892: 5, 2182423316161949672: 0, 6605341002990676264: 0, -2210989209189994040: 4, -7461557453517303744: 3, -2678786488657100672: 1, 3965640609327078796: 1, 5062485450632569216: 0, -6598990774126417856: 1, 6422109666651317392: 1, 2463465673427685672: 1, -9018604414666389748: 3, -3567372116596982848: 1, -6976751414624714148: 1, 7743764017256405068: 1, 8520122691116484544: 1, 8520084957593777384: 3, -507706060817852516: 2, 6456967924797623680: 2, 3571933152721380420: 2, -5818710954967449520: 2, 5212252875710190212: 2, -2787316113274703804: 2, -2787353846797410964: 2, 1741225695503532328: 3, -2426907839569292752: 2, 5705695719866456576: 4, -4491513936520694160: 3, -8217742578349126560: 2, -1794663236496056708: 3, -1794700970018763868: 4, -3809887043952852202: 1, 6339511300781071518: 0, -986526709956357014: 2, 2366742774564220634: 0, 4677888755904040526: 1, 5372722556039727210: 3, 5372760289562434370: 0, -5858880206898362992: 2, 8923107298801890896: 1, 3147646778758788804: 2, 4583614007526210028: 2, 2563858032805806672: 2, 2563820299283099512: 2, -1735552394213991968: 3, -5903685929286817048: 3, 1087807939782503220: 2, 2640306613818007348: 4, 6752223405642900760: 2, 7900234694207702080: 2, 7447019472255880284: 0, 4588257144303587448: 2, 4204140022271909304: 2, -4851959943748812372: 2, -7883354785441558088: 2, -8432865509592826068: 2, 3869266812856196232: 4, -3506344178244802180: 4, -2161570977168472288: 3, 5037648364860022216: 3, -8149167628459834668: 2, 5049677721213865416: 2, -7339061819184394192: 4, -7277387381104646120: 0, 4658620165396952152: 0, -1106322187160167704: 0, 8710340503483142556: 0, 1471895166103463376: 0, -2951173454798551676: 0, 8094104108162004224: 1, -180488523903897864: 3, -3903577876419342120: 1, 1861364476137777736: 1, -7103261048596571884: 1, -716852877125853344: 3, -318030933168714500: 3, 9043076157573756016: 4, -8935870636668688968: 0, 7437670355944656692: 0, 6645734406531741148: 0, -592710930847938032: 0, -5015779551749953084: 0, 6464858804310124936: 4, -6357653283405057888: 0, 4067517053268110068: 0, -4092053129941095632: 0, -7593996905013584164: 0, 1216960080274273404: 4, 7666022169402478676: 0, 3614301831316288272: 0, -8596685117593966780: 0, -1260856870212904524: 3, 8469184508617680908: 3, -5233625396429755408: 4, 8895203091572161228: 3, -2766273133186825844: 3, 4384654792582510580: 3, -1505236999028188152: 3, 5139190098955991316: 2, -1477612403813585496: 3, 5307655445136979048: 3, -3689273785741294312: 3, -8784897033265558154: 1, -710968454941753262: 3, 4531533118388769026: 2, -1136987037896233582: 1, -7922254886846798126: 1, -2496611253914981758: 2, 5565208681910471636: 0, 4186803062046812044: 3, 4881636862182498728: 3, -3263255202786813992: 3, -5387222803760903330: 3, 6312407529694611646: 1, 4239204448598405690: 1, 7136820100388969630: 2, -8947611544721451194: 1, 8496444316407717806: 1, -9087733077910947922: 4, -6708692911083123602: 1, -8781895992179329558: 1, -3165031908351269266: 0, 6314709355550636198: 6, 5818742131689755199: 4, -808965492031718783: 1, -2297841411774645557: 3, -7085917684929673327: 4, 6712521333602890091: 3, -5903522361241105059: 3, -5903503494488521569: 4, -1030518846941292191: 3, 8848904998314570049: 3, 9039122810681228061: 3, -9037194194298711787: 4, -397258517650787907: 3, 5433441861214768559: 3, 5433460727967352049: 3, -2519394766684218965: 3, 2051431266471128099: 3, 7920673959667913055: 0, 8486681057992032043: 3, -4129362636851963107: 3, -4129343770099379617: 3, -5320973556102795183: 0, 3766773021775999387: 5, 7154030010813621001: 4, 5119095170249336837: 2, -6627758418833765617: 2, 3548349061347161499: 4, 3548367928099744989: 2, 6490967978693316683: 3, -1515707368664102913: 4, -8449471150750574519: 3, 5307018691480052861: 3, 5307037558232636351: 3, -9030671594687709511: 0, -2728603131550793045: 3, -6115860120588414659: 4, 7665928309058971959: 2, 4089262370476248465: 2, -2510160304369371667: 1, -883006574159111365: 0, 7570513655135327405: 2, 4606917853796815191: 4, -4599278225676269667: 4, -6978557845437352161: 3, 5637485849406642989: 1, 3514899460440262111: 4, -7032692295488013713: 3, -5708343329425396689: 3, 2037694730405213491: 4, 3302019415952138959: 3, 9132719794817695425: 3, 9132738661570278915: 3, 55469674877080333: 1, 2141178652682792027: 1, -8943738060429705909: 3, 639660450878993325: 2, -5432190939519343449: 2, 398509439346213017: 2, 398528306098796507: 2, 4588381164814585511: 1, 8298964620620524029: 4, -1077392427195800383: 0, -8796720877453022643: 4, -2966020498587466177: 0, -2966001631834882687: 1, 9065832420254615981: 1, -7295202675649223941: 0, -6263917882062376787: 3, -8611853306031322631: 3, -8611834439278739141: 3, 7797288492666657581: 5, 7964338242813869441: 1, 7774120430447211429: 2, 4849251085212855567: 0, -1236242314930324219: 3, 5642926517706353197: 3, -7066923827043297195: 3, 8942520849203620903: 3, -1377749539942004509: 1, -67841896173914745: 3, -5898542275039471211: 3, -2913389206682204445: 3, 1640042282802053031: 3, -811134500993956581: 3, -5290664982075767933: 3, 2224233058803966023: 2, -8758639909583045775: 3, -2927939530717489309: 3, -2927920663964905819: 3, 6321637213372795913: 2, 8469208900387514589: 1, 2312424404890980071: 0, 5263280102569794107: 0, 7916767147698318571: 4, -4699276547145676579: 3, -4699257680393093089: 0, 7332576371696405579: 3, 5185004684681686903: 1, -7516343877200405263: 3, -5209526755928078101: 3, -6878597257473112229: 1, -6878578390720528739: 1, -5283467323147589571: 3, -7431039010162308247: 1, -1685643498334848797: 0, -8073357003160239705: 3, 5737465304123466411: 3, -9160560794547383771: 2, 7774139297199794919: 2, -3684913232299656735: 3, -4713534546101292609: 2, 8326581049888990937: 3, 2495880671023434471: 0, -2592894838943103655: 2, -7578584909079532933: 0, -8732808097753334995: 3, -3007758875924185869: 4, 2861483817272599087: 4, 2812774470752861627: 3, 8643474849618418093: 2, 8643493716371001583: 4, -770888617228698371: 0, -761162284829250989: 1, -2635550569413994385: 2, 4896286238970380543: 0, 6374812175963541263: 0, -6241231518880453887: 3, -6241212652127870397: 0, -6595982262364551685: 2, 8247668011510798271: 2, 6223516894971175873: 3, 9174372592649989909: 2, 300162602921709077: 2, 6130862981787265543: 2, 6130881848539849033: 2, 6375238421227697363: 4, 6751024453670066603: 4, 5262224000955013969: 2, 5383784780762271429: 4, -4174157327377001999: 4, -4942898490109649155: 4, 1656486451213263817: 2, 6750598208405910503: 0, 7863688095706468037: 2, 5022709408705096241: 4, -1677400457136245349: 3, 4684025729194488855: 3, 4684044595947072345: 3, -5865445486438084647: 0, -4752355599137527113: 2, -7593334286138898909: 0, 5452766891927136011: 3, -1146655782918484121: 0, 8267707683928632343: 3, 2542658462099483217: 4, 5170316522196236233: 4, -3277874884577564279: 3, -9108575263443120745: 1, 7215582421300049993: 4, -4765582005434012083: 0, 7988400651379497981: 1, -1574403846687233685: 2, -2522263335287429833: 0, -681108835487304045: 0, -4754066213199212867: 4, -4754047346446629377: 4, 2280074661042447609: 3, -7282729837024284057: 3, 3186062655049620539: 4, -5064512651239637745: 3, 7984351870173288377: 3, 7984370736925871867: 3, -67860762926498235: 3, -8951800338569318185: 3, -8899255232329196873: 4, -710178755924429693: 3, -5772119105304755513: 3, -8951781471816734695: 3, -8899236365576613383: 4, 8011868041392738297: 3, 6133075594498683459: 0, -6938789024804317061: 0, 1945150550838502889: 2, 7861415692291036397: 5, -7065212194539032759: 4, -6296471031806385603: 5, 5550850367057545881: 0, 6075759854212700017: 3, 6811308069710179181: 3, 8300183989453105955: 3, -8130514069596549717: 2, -402000016106545797: 3, -6540860268037402669: 3, -523662820632920115: 3, 3664262223027260455: 3, 3716807329267381767: 2, 2181167662527181831: 3, -3664104363117883829: 1, 6662059842890620385: 5, 1825820064838042727: 1, -1056651111440517201: 1, -1390152790209166227: 1, 2856388060447870525: 1, 733801671481489647: 1, 7914784129202883051: 3, -5223362132406153389: 3, 8154704431137240397: 2, -1285796428541310609: 2, -7116496807406867075: 3, -4131343739049600309: 2, -4314908320161446369: 5, -3644667245102050707: 1, -5284842388997970123: 1, 6079623120448318635: 1, -1371803217109582397: 1, -3494389606075963275: 1, -1432437143882886441: 5, -472460335438604209: 1, 8962094296726878563: 1, 1510667959168977531: 1, -611918429797403347: 1, -1213615492880232305: 2, -7050738781098430465: 2, -5329439012142558763: 3, -1204671803481358323: 2, 1001473852001356147: 4, 1667632340608692635: 2, -2995124586403365171: 2, -7044315871745788771: 1, 5565304913745564685: 2, 7286604682701436387: 1, -7035372182346914789: 1, 898891177876045479: 1, -8825824965268921637: 2, -3222889926804893289: 5, -278416751028754321: 1, -279784823753029317: 1, -6206060509613859183: 1, -4265134792557299439: 2, 6533387447499142293: 2, 7110215250516953571: 4, 8654012152571183889: 2, -2712776068466215663: 2, 3117924310399340803: 2, 3117943177151924293: 2, -5705675208929684043: 2, 7114081745603939799: 2, 5868161638683822863: 1, 3922484564037989795: 1, -7444303656999409757: 2, -1613603278133853291: 2, -1613584411381269801: 2, -5348185916019054115: 0, -211212372255387961: 0, 3668981962339195993: 4, -6351498632960610149: 1, 728457219711541915: 1, 6559157598577098381: 1, 6559176465329681871: 1, -2285196853242735485: 2, 1723304887693362925: 3, 5905872135136339619: 2, 2674134294357374983: 2, 8504834673222931449: 2, 8504853539975514939: 2, 3870716680947453803: 1, 4037766431094665663: 2, -7086814364088779829: 1, 1917141726022624067: 2, -7709294826703042967: 1, 667886252216028469: 1, 667905118968611959: 1, -8745327013896541347: 1, -8578277263749329487: 2, -1256113985223223363: 1, 7747842104888180533: 2, 7547055084852705885: 0, -5162795259896944507: 1, -7821265828661995081: 2, -3812764087725896671: 4, 1424897687303362875: 2, -4405802691562193591: 2, -1420649623204926825: 2, 2074830541432099489: 1, -6989317788796877023: 2, 7501075564619048975: 1, -3516445991917945869: 1, 3563509860754206195: 1, -9052533834089788955: 0, -9052514967337205465: 1, 5845579111637110597: 2, -8259658838505123213: 1, 2095401181357618127: 2, 9175357034029770191: 2, -3440686660814224959: 2, -3440667794061641469: 2, -1022145888369285953: 0, 3599832818078547651: 2, 3358309781994193469: 2, -6040826452615607625: 3, 1039129400056544439: 2, 6869829778922100905: 1, 6869848645674684395: 2, 849481074437501191: 2, 7038854380050103039: 2, -2425623092753088085: 3, 3405077286112468381: 2, 3405096152865051871: 2, 7929436927109653255: 1, 5211643817223111101: 4, -3674878566559683683: 2, -3674859699807100193: 2, 902657878494509835: 4, -3053692841799115783: 1, -4033853269843467283: 1, 7332934951193932269: 1, 4576316695408915637: 1, 1502253439080959293: 1, 902676745247093325: 4, -3053673975046532293: 1, -4033834403090883793: 1, 7332953817946515759: 1, -4145692368403085373: 1, 826658184113775237: 1, -6885243054308311717: 0, 1393629466980467651: 1, 5852577274964760231: 2, -5514210946072639321: 2, 316489432792917145: 2, 316508299545500635: 1, 8818028290714543399: 1, 703386286790309655: 3, 6542820455154918227: 2, -4823967765882481325: 2, 1006732612983075141: 2, 1006751479735658631: 2, 2123630820029327417: 1, 3486617188335707925: 0, 182364490895169349: 0, -2895049744216994255: 0, 4184906108455157809: 1, -8431137586388837341: 0, -8431118719636253851: 1, -4806147490650741573: 1, -6169133858957122081: 5, -1689777674638628329: 1, 7292488926267732163: 2, -5323554768576262987: 3, -5323535901823679497: 5, 3454904755406298043: 4, -495530381826317649: 1, 7141736528149881537: 1, -1744785855632913247: 1, -1744766988880329757: 2, 8104508740886966957: 1, 6741522372580586449: 5, 6043233452461136565: 2, 3286615196676119933: 0, 212551940348163589: 3, -9161120072685113617: 0, 5335188863791822307: 5, -7575467367745886223: 2, 5223330898479620727: 2, -3616400584912172803: 3, -7638750222130780273: 3, -2330152410030265097: 2, 297505650066487919: 1, -2679419074530669805: 2, 3151281304334886661: 2, 3151300171087470151: 0, 2534557428564449063: 1, -1639909229840107101: 2, -6841799619251875349: 0, 4459886194787693463: 1, -8156157500056301687: 3, -8156138633303718197: 1, 3345490944678347055: 3, 6296346642357161091: 2, -8678260066821342977: 2, -2847559687955786511: 2, -2847540821203203021: 2, -4186314495205886275: 1, 7121124309185302073: 2, 2643433545798352341: 1, 5594289243477166377: 2, 7912321921712587461: 1, -4703721773131407689: 1, -4703702906378824199: 1, -6050602006724589961: 2, -7287175063010015167: 3, -8947355112583587075: 6, -8947336245831003585: 5, 5224484385431092617: 2, -6082954418960095731: 3, -2016652639242221067: 1, -6874152031487381119: 6, -8404366144067611975: 2, 5741910530109197521: 4, 5224503252183676107: 1, -6082935552207512241: 2, -2016633772489637577: 1, -6874133164734797629: 5, 317680653249556015: 2, 4794758999429416579: 2, -4397775818385485193: 2, 1663955471047151721: 4, -8633304510033813365: 2, -996037600057614179: 2, 8564184089869142653: 2, 8564202956621726143: 2, 9205645030488990759: 1, 2066339761170627491: 1, 2212608723023657531: 1, -4222418478974239185: 3, 3414848431001960001: 4, -5471673952780834783: 6, -5471655086028251293: 5, -5458469265078374345: 3, -372393544256549581: 3, 5747137783957863587: 3, -8574839081090487589: 2, 8380518820151831909: 4, 6720338770578260001: 6, 6720357637330843491: 5, 2733199387721530053: 2, 8689464046032207925: 1, -5690978247959469027: 2, 7751879951967851725: 1, 383461270953850549: 1, 6502624478161256127: 6, 6502643344913839617: 2, 1424878820550779385: 2, -5874058242904310553: 4, -3593801743695542287: 2, -3182877167928565977: 2, 6242772364761626409: 2, -2344527403136363199: 2, -5874039376151727063: 4, -3593782876942958797: 2, -3182858301175982487: 2, -3481924911630757217: 2, -7821284695414578571: 2, 1432924560480071273: 2, 7494655849912708187: 1, -2802604131168256899: 2, 5807565834084126021: 2, 2733502577756169677: 2, -3410398664355004391: 1, 7897040140036183957: 1, 8043309101889213997: 1, 1608281899891317281: 3, -8228292208565851415: 1, 7144388608815743857: 4, 171444093751707473: 2, -4378267273848161811: 2, 1741264054366251357: 2, 5190124657998029145: 2, -1889831194674122919: 3, -5107011873373902811: 5, -7720512706787095895: 4, 6742004318692268087: 3, 9022260817901036353: 2, 412090852648653433: 2, 9134118783213237933: 2, 1432943427232654763: 2, 7494674716665291677: 1, -2802585264415673409: 2, -2914443229727874989: 2, -3410379797602420901: 1, 7897059006788767447: 1, 8043327968641797487: 1, 1608300766643900771: 3, 1496442801331699191: 3, 1094058511208223421: 4, 3598030941041394847: 2, -317516321165255721: 2, 4464964321269832647: 3, 290497662865276483: 3, -4911392726546491765: 1, -8195637200805707401: 3, -2364936821940150935: 3, -2364917955187567445: 3, -399745517324881513: 3, 5275897837383730639: 3, 8226753535062544675: 2, -2887039388705192225: 3, 2943660990160364241: 3, 2943679856912947731: 3, -3333108075337857559: 2, 7974330729053330789: 1, 2665732916952815613: 2, 6006885104548717417: 1, -5820401946718168271: 2, 10298432147388195: 1, 10317298899971685: 2, 3111801603585480947: 3, -259381328608439209: 0, -9217581955715398751: 3, -7016948219878203491: 3, -7016929353125620001: 3, -291733740843944979: 3, 3774568038873929685: 1, -6634128665836791273: 1, -4943745138781997535: 4, -2613145465951461223: 3, 7672317422814581105: 3, 5484604026920621271: 1, -5600312686191876665: 1, 3983085825116822569: 1, 2885822177479107219: 3, -2944878201386449247: 1, -4508294292835323585: 1, -2875740597945357989: 2, -4238726966251738497: 3, -8686270422333145007: 0, 240629218066755255: 1, -5363034469325668701: 2, 467665909539887765: 1, 467684776292471255: 1, 7695867554425005201: 3, -7231931311209926001: 3, 8185859413144746385: 2, 7143425801735809183: 3, -5472617893108185967: 3, -5472599026355602477: 3, 8208528629980367781: 2, -8303363325038069141: 1, 3120662236768924119: 3, 8764091260742408497: 1, 2195875340082393281: 2, 8026575718947949747: 3, 8026594585700533237: 3, -164521240918945379: 2, 5295690296289833103: 1, 8804594460559991985: 3, 2951848575093167865: 2, -6281881755327617297: 2, -6767911645864966029: 2, -6767892779112382539: 2, 2532272006491289173: 3, 2042280147771547989: 3, 3084713759180485191: 2, -7745833074928336333: 3, -2745967752932487785: 3, 2532290873243872663: 3, 2042299014524131479: 3, 3084732625933068681: 2, 1978901934969214273: 3, -7710249741780956245: 0, -2401651929680441069: 3, -2052801217981324713: 2, -5122844440794305097: 2, 707855938071251369: 0, 707874804823834859: 2, -4336504048371555763: 0, -6731797115288329083: 2, -4221551976405992723: 0, 8097586735440021353: 3, -4518456959403973797: 2, -4518438092651390307: 2, -7337519362368447013: 1, -9183072483211054003: 3, 5872205334023205901: 2, 3161719302752015409: 2, 8992419681617571875: 0, 8992438548370155365: 1, 8446437447139137709: 2, 1746327581297796119: 2, 1260297690760447387: 2, 1260316557513030877: 3, -4169606247704857441: 0, 8876494930361177479: 0, -4570383821352525589: 0, -4752336732384943623: 0, -4169587380952273951: 2, 154485866549176469: 2, -8347250925913970707: 3, -2671607571205358555: 3, 279248126473455481: 2, 3982132633386908991: 3, 3496102742849560259: 3, 3496121609602143749: 3, 5981915029007203877: 2, -3700228885006994429: 4, -749373187328180393: 4, -5595657022610246523: 4, 1313376742752297921: 4, 1313395609504881411: 4, 6609790693483662007: 4, -1640784612805596277: 3, 4560623831739246909: 3, 4560642698491830399: 3, 4327009791563125703: 3, 6633826912835452865: 3, -2060703713262265205: 3, -275187985774508089: 4, -4943726272029414045: 3, 4327028658315709193: 3, 6633845779588036355: 3, 6661343084054902785: 3, -2516550547048414241: 3, 3159092807660197911: 3, 6109948505339011947: 2, -7334444091259261265: 3, -2334578769263412717: 3, 7943991543129176061: 2, -7161600342984473751: 0, 7957803840736477389: 4, -2872742993372344135: 5, 2127122328623504413: 2, -4686348547047667179: 3, -4706786031162508249: 5, -4133906794358471161: 3, 3021728022327495671: 3, 8482155767238107479: 3, -1503671720549847273: 3, -4517304769360675055: 3, -7891385225375238181: 3, 830642705189346319: 3, -2516531680295830751: 3, 3159111674412781401: 3, 6109967372091595437: 2, 2390290918638289341: 3, -6634109799084207783: 1, 2130490360611145527: 2, 5081346058289959563: 2, 207564918541027003: 2, 648689794156928285: 3, 6108901331365706767: 3, 3221197967351854785: 2, 1751823096196599389: 6, 5363472632737354575: 3, 4010974753944355557: 3, 9197382501637228919: 3, -3083813273416542697: 4, -4099812612105554217: 3, 1730887766760002249: 3, 1730906633512585739: 3, 7918726915294859535: 2, -8801062226952065887: 2, -3492464414851550711: 3, -864806354754797695: 1, 2506988673162203557: 5, 8337689052027760023: 4, 8337707918780343513: 0, 5990267066962529471: 3, -6363621979221970883: 2, 9014853475594350041: 0, -3789185973111834107: 2, 2041514405753722359: 2, 2041533272506305849: 2, 1592948804790487335: 3, -3593458942902386027: 3, -5819721185059901375: 5, -8801582635819277669: 3, -2912307524003598041: 3, -2912288657251014551: 3, 8526160758741437757: 3, -586143654343030657: 6, -3160579660453167433: 6, -8216153191551062077: 2, -8991261172566140409: 4, 7423668050408627291: 3, 2237260302715753929: 3, 10998060558238581: 1, -8742989036116571017: 3, 754165742215675305: 3, -1064926220509288193: 1, -951540244843877171: 2, 6410287115753176509: 3, -480735444507375201: 1, -6037003869942620839: 5, -206303491077064373: 4, -206284624324480883: 2, -3004769793340415675: 4, -4831853176020787343: 3, 2994071198950257497: 2, 7159904855590059471: 3, -3004157697617334579: 5, 2826542681248221887: 4, 2826561548000805377: 4, -2802221234661392715: 2, 2183178939857061441: 2, 5134034637535875477: 2, -3491852319128469615: 5, 2338848059737086851: 4, 2338866926489670341: 2, -4453503970724226085: 0, 6853934833666962263: 1, 1545337021566447087: 2, 4886489209162348891: 1, -1002474223381853157: 5, 4828226155483703309: 4, 4828245022236286799: 1, -8221139208172179003: 2, -1081833938853815735: 3, 4226763873246699441: 3, 5154429641064555891: 3, -131531158651080553: 3, -3403245663961331979: 1, -5841525176924286115: 4, -9175782145285061221: 2, -2036476875966697953: 3, 3272120936133817223: 2, -676270737801000575: 3, -5962231537516637019: 3, -4357888601074214197: 3, -10749331030855509: 4, -2969730885610844835: 3, 4966524986586423357: 1, 8337095823057262417: 5, 2506395444191705951: 4, 3430885319846223421: 1, 3431952900885901073: 0, 5155415621042566711: 1, 3187969996537953339: 4, 696044989242542395: 5, 6526745368108098861: 4, 6526764234860682351: 0, 6919841435954378883: 1, -1857832332543574887: 1, -6216183679983057979: 4, -3825277957048188259: 1, -1066634720016289499: 2, 4764065658849266967: 6, 4764084525601850457: 2, 2783247707418407469: 5, 1361129790644685103: 1, 3225280244756611711: 3, 6510678750611453583: 5, -6105364944232541567: 4, -6105346077479958077: 5, 8769973567566347287: 2, -3889995054012784687: 2, -3677929513852531157: 2, -336777326256629353: 2, 2979176968079316529: 4, 6027396948031093805: 6, 6027415814783677295: 5, -4272088710232128183: 4, 2366723907807252099: 4, -7695816748666169651: 4, 5067904469654446793: 4, -9210848143810198301: 4, -9089982254442975207: 5, -229303147036359491: 4, -612541034457680917: 1, -2579986658962294289: 1, -321303937730481681: 5, -6152004316596038147: 4, -7013157239914749173: 1, 1541355693580254827: 2, -606215993434463849: 1, -5585936984495021679: 4, 2125546469582167819: 2, 7445996639665322763: 2, -1087376579356961477: 6, -1087357712604377987: 5, -6828233016877662191: 2, -9089649050490418045: 3, 1352205123619658431: 5, 8867103164499392387: 3, -2220477028398316829: 4, 8875934437296635943: 6, 8875953304049219433: 5, 8955294510586406435: 4, -6540593865444331145: 2, -3665250129904862939: 4, -617030149953085663: 6, -617011283200502173: 5, -3799837852719687773: 3, 1986937599410731869: 3, 7465024617691505275: 3, 7580584362480147597: 2, -6149575969487367277: 3, -6542414472254941255: 6, -6542395605502357765: 5, -1191305770281939201: 5, 1070110263348356833: 5, -7190146762572612373: 2, -513100959028107939: 2, -5799061758743744383: 4, 3626587773928907823: 3, -6098128369216059293: 3, -1191324637034522691: 2, 1070166863606107303: 3, -7190165629325195863: 2, -513044358770357469: 2, -5799005158485993913: 4, 3626568907176324333: 3, -6098147235968642783: 2, 8100142175786957437: 2, 2725262721380406341: 2, 2414987882468081367: 1, 2467532988708202679: 1, -7669268719229358663: 1, -7790134608596581757: 1, -8565242589611660089: 0, -8582176083010782007: 3, -4223824735571298915: 0, -645920210813513815: 2, -1030456101189978381: 0, 7543156265591253365: 3, 3242688866058511245: 2, -3583853109822591805: 2, -956195049725838789: 4, 7353747316046151485: 3, 7232881426678928391: 2, -5141514551177618621: 2, -1960942728892308291: 5, 4677869889147071991: 5, -5384670767326349759: 5, 514925820941537029: 4, 2356080320741662817: 5, -6778836273103155315: 4, 2081842834303460401: 3, 6223251811278587401: 4, -2027323495010670883: 3, 5959581810269345929: 3, -3626483156033589971: 3, -2350360555502644345: 6, 5378153497987359575: 5, -3747349045400813065: 3, 6510318551903971371: 5, 4974678885163771435: 3, -219882761106450005: 5, 3668707449012991565: 4, -1755522427846649941: 1, 2467551855460786169: 2, -645901344060930325: 0, -956176182973255299: 1, 5398124228858228649: 0, 6223270678031170891: 4, 7374374454394906261: 2, 4050725638204460921: 0, 2288121395973503167: 2, 7474453676638502389: 1, 679542706010540765: 3, -4581050626118598049: 3, 8868619182415307945: 3, -856096960729659171: 3, 2516845451474507199: 3, -2669562296218366163: 3, 4917820659492358673: 2, -7819111256185134643: 3, 4796932438658860507: 3, 1857299044255346409: 3, 9098311849563789171: 0, 7271228466883417503: 3, -2399344767194057189: 1, -1156080577355587971: 3, -4414112320744775923: 3, -5579007133706036371: 3, -5578988266953452881: 3, -8086504164663197195: 4, -1847633420501317387: 2, 983882861230030009: 4, 3532662681847857055: 4, -5027295787013296569: 4, -5027276920260713079: 4, 8236339319353125481: 3, -2274148882159157943: 4, 7922019885261135389: 3, 6049499751482173683: 3, 6049518618234757173: 3, 7071444506391865033: 3, -3439043695120418391: 4, 4750032781284348789: 3, -3837266986613640819: 3, -3525758718456914377: 3, -2494473924870067223: 3, 6065484543991086401: 0, 4928087035496692383: 2, -2851640995107535913: 3, -3227427027549905153: 3, -1738551107806978379: 4, 5004012742438493817: 3, -3246562563850764467: 3, -4918213474318957561: 3, -4918194607566374071: 0, -997391011067659681: 3, 3721660429401800103: 3, 6938864861129608511: 0, -1311710445159649773: 3, 541998062889820921: 3, 542016929642404411: 4, 7535561554613768657: 3, -5450970981887004477: 3, -3372548690513022311: 3, -7198736448291748997: 4, 1459594796017656753: 3, 932171149667748007: 2, 932190016420331497: 3, 8021604221442679285: 4, -4798785575497193387: 3, 4085154000145626563: 4, -3095445120478796073: 3, -1254290620678670285: 1, 905491633633647381: 2, 905510500386230871: 2, 177165474583277001: 3, 3088296160048238437: 3, 6211879981282743977: 4, -3002496891928702181: 3, -3002478025176118691: 3, -8341941512752999029: 3, 5248078414360556103: 1, 8710637055179747031: 3, -5162260279488436357: 3, -8341922646000415539: 4, 5248097281113139593: 4, -11372008632253979: 2, 824641511670172517: 3, -6892556750246356971: 3, 1991382825396462979: 3, 2226449431340722545: 0, -3782083329805257993: 3, -1188279541115516203: 3, -1188260674362932713: 3, -936292091935679099: 3, 56530706705348285: 3, 4161301550031837239: 3, 9204449206695515141: 3, -3123131659806630897: 3, -3123112793054047407: 3, 7756325177953582835: 0, 5821473059262468141: 1, -667852457727416245: 3, 3456914750933784195: 2, 5406587061185903331: 2, 1152934773007562185: 4, 1152953639760145675: 3, 2004908542464006227: 3, -3455302994744772255: 3, 5428636580898047695: 2, 6049505853301997955: 0, 9173089674536503495: 3, 2248974214386068513: 3, 2248993081138652003: 4, -358355291371216525: 3, -2133066471443585483: 3, -8199708693652410853: 3, -3538017657883195707: 3, -3537998791130612217: 3, -4612007579549557671: 3, 2470515103262784831: 3, -6006173085326363227: 3, -1432326346284994999: 3, -4611988712796974181: 3, 2470533970015368321: 4, 3718561924571187379: 3, -9000064313230147453: 4, 2274780985347542217: 4, -2130892291138046237: 4, 6563638334959671833: 5, -7309258999708511555: 4, 3430128326971682825: 4, -4820446979317575459: 3, 3166458325962441353: 3, 7740305065003809581: 3, 4729595297169507719: 5, -5988634723050039977: 3, -954225561093908489: 3, 4376664479482054233: 2, -2231861184984541495: 0, -742985265241614721: 2, 4960855255483967225: 4, -325105544231669219: 2, 651180240535190835: 2, -9073535902609776281: 1, -6688899465137744071: 1, -8177775384880670845: 2, -2278178796612784057: 6, -437024296812658269: 6, -4998113018368691663: 0, 152775252487490715: 4, 3430147193724266315: 4, -4820428112564991969: 3, -5555550737849559657: 3, 2769817766153754685: 3, -6192619027475430701: 2, 6584621971731321697: 0, -1487544470501319077: 2, -6773505270216955521: 1, 2525752094231692399: 2, 3872951068193425789: 6, -6152029196973859127: 3, 4646493043082582605: 3, -662104769017932571: 3, -6892833441389593775: 3, 1097734310141642091: 3, 6967904768190098849: 3, -1356726732465167199: 3, 6245979582048503281: 1, -3975006365983361637: 4, -449403770678594417: 1, -2379810663383978001: 3, -117412986542251163: 1, -6965816527513836993: 5, 3156296045540448575: 4, -8901633188734961815: 1, -2133779412465351217: 1, 3174818399635163959: 2, -1760001902253149337: 2, -2448098846557341309: 2, 6686817747287476823: 1, 3776104806671277239: 0, 3888475350440773817: 4, -337957663342302401: 5, 4472666126442686809: 1, -813294673272949635: 3, -2659369388449818645: 3, -1709268543655251061: 3, -4608211325817355593: 1, 1935816561954287341: 0, 3181718316383835357: 1, 1251311423678451773: 0, 3674726676358835753: 0, -6785112092070699051: 0, 6787418132602878349: 0, -6212554262259778415: 4, -4912586979017298489: 0, 1335643601206966347: 1, -594763291498417237: 1, -5641331578543039489: 5, 4941343417426009339: 3, -3975427690222239481: 3, -3808377940075027621: 4, 5800541651691765175: 2, 7730948544397148759: 3, -4283714950005674855: 1, -6129789665182543865: 1, 2592238265382040635: 3, -2863188275133127813: 2, -98295747743380327: 1, 5210302064357134849: 2, 8923088432044922361: 3, -412615181835370419: 2, 8722301412009447713: 4, -3987548932740202679: 2, -4078335571817021067: 3, 1399316234351814597: 4, 2870751885134684189: 1, 940344992429300605: 3, -4227225086378167095: 4, -8896229116027868091: 4, 6476451701353727181: 4, 1262538847822082255: 1, -8772592030504731499: 2, -3463994218404216323: 2, 4797361309089712293: 3, -9086911464596721591: 2, 48005129248096541: 1, -8113276055695412747: 2, 3147627912001820269: 2, 2982197992470976205: 4, -3801459544949884987: 0, 2667878558378986113: 3, 7965521456212667293: 3, 3665054056679925173: 2, 1548542614636902713: 2, 1713972534167746777: 1, 8497630071588607969: 0, 6567223178883224385: 3, 5715989220368088837: 0, -3269350929573944311: 1, -6343414185901900655: 0, 4382808120733766845: 4, -5418408887218771267: 4, -7114848496024079515: 4, -9045255388729463099: 4, 4722332411412422973: 5, -8200383035241050771: 4, -3509148679805036523: 4, 4868238664041125247: 0, -5166892214285688507: 0, -6182869162990029163: 3, -5481211648377678599: 1, 3653704945467139533: 4, -6071011197677827583: 1, 5085121479476190579: 1, 1971668279954474085: 0, -2343670018441521571: 0, -269013451663234473: 3, -5680963659285985801: 4, 267227935265343555: 5, 5267093257261192103: 4, 2837353073089495295: 1, 7980520965659166407: 2, 2357603719466661139: 5, 7655246617300342319: 3, -4719149360556204693: 5, 1946796298048966335: 1, -1166656901472750159: 0, 6807166865481665247: 0, -3407338633090458717: 3, -5565137689314566793: 1, -2871097246161880689: 5, 2128768075833967859: 0, -4001395296502363021: 4, -8494014492354385957: 4, 9091213846067763543: 4, -3661871005823706893: 2, 1862157621232370979: 4, -3819423518717361497: 4, -5194301992432296503: 2, -168569241097498305: 2, 3879671493483392587: 3, -5791486487290003573: 2, 3343430106554814559: 5, -6381286036590152557: 2, -2787608050635699837: 3, 4252386159953842807: 3, 4562660998866167781: 2, 2632254106160784197: 1, -7978168636950385555: 0, -3678960583778720711: 1, 8168360815085210773: 1, 1760173610040849185: 0, -6722315387593679757: 1, -5729492588952652373: 1, -7659899481658035957: 0, 3418425911037514483: 1, 950270483594346963: 0, -2123792772733609381: 0, -7245270456804003553: 0, -2619220604432190787: 3, -791473932273257271: 1, -4554440598516344087: 2, -255232545344679243: 2, 4744632776651169305: 2, 622672555494471589: 4, 6578937213805149461: 4, -4526264308749215795: 1, -3676737871525327051: 3, -1727065561273207915: 3, -4195220988716375435: 3, 2940249292880594365: 3, -8505984273772059579: 3, -5392531074250343085: 1, -5082256235338018111: 2, -7012663128043401695: 1, 5523134436090339177: 5, 6766469289649093669: 3, -1476556419118975119: 5, -565507384257004217: 1, -2185639438050062827: 3, -3160275092739538531: 1, 9131117014931371705: 5, 3350467270874363749: 3, -3639570640584960561: 1, 6675039669356552889: 3, -948740782297301095: 1, -5371560659690220751: 3, -5113380100974925193: 4, -2576938152147299915: 2, 7485602504326121835: 1, 5555195611620738251: 3, -635153188951543563: 1, 7970841688166279803: 1, -7355441753164386789: 1, -2972820521755987893: 4, -1865942515222457363: 1, 7579626760832578673: 0, 5649219868127195089: 3, -3985038944266231861: 0, 7795368024963304313: 1, -7261417496657929951: 0, -8936704724362941845: 4, 6396586149824893277: 4, 5017420153494586835: 2, 4155904418207184719: 3, -605497092697918433: 2, -9076611192129718281: 4, -8754732946577940321: 4, -3451331374036413545: 3, -6564784573558130039: 3, -6875059412470455013: 3, 446734567818434685: 3, -8148359028880037475: 3, 3713497347046017351: 3, 591454189159355147: 5, -1207028547654958935: 0, 1906424651866757559: 1, 2216699490779082533: 4, 286292598073698949: 3, 6079020423999055609: 1, 5599589665553623045: 1, 5822399306998125525: 5, 5946404843145791867: 3, -692407774893588415: 4, 7439725988874449751: 0, -2384802788519231545: 4, -6616582355090141731: 3, -5470911375910675289: 3, 943154133375380073: 4, -7571692335570254925: 0, -5641285442864871341: 3, -69064289134863895: 0, 3016864423946217439: 4, 758858301797906635: 0, 5076882122869827901: 1, -3592297279531539773: 1, -6391512621818731817: 3, -9215214525724045041: 2, -80297931879226909: 3, 8641729998685357591: 3, -6706910170222824937: 4, 5101021285447346397: 4, -3283182131788783469: 4, 1318728898625406103: 4, 3268401208877525239: 3, -1889016626011977913: 4, 6833011304552606587: 4, -3229960986380184161: 3, -6653689024814225629: 0, -4723282132108842045: 3, 937485619351001963: 0, -8047854530591031185: 5, 1676861612553935931: 3, -395695480283320029: 4, -56171189604663901: 1, 5467857437451413971: 4, 4511127118650800063: 4, 8326332450281264471: 4, 5212879250759547977: 4, 4902604411847223003: 4, -8778199120169248401: 1, 2124730563471728243: 4, 859302238555956635: 3, -8517054809260367777: 4, 7071463373144448523: 3, 1240762994278892057: 3, -4407182813205152609: 3, -2255784919045057239: 3, 6814602106848169965: 6, 7588766774583282071: 0, 1940820967099237405: 3, -3144822346152554641: 3, 2846168795907991381: 1, 7204520143347474473: 3, -2560631570150641649: 1, 524757070800475137: 1, -9199959072344491979: 2, -5625137345572548473: 4, -316539533472033297: 3, -5385217043638191127: 2, 6423424667368564449: 2, -3028210437009929205: 6, 7130832249214719359: 1, -5658463300695200725: 0, -8302487940553700789: 3, 4313555754290294361: 3, -1334390053193750305: 0, -1178403230317922743: 1, 3896295942049039117: 2, 520115982306472809: 2, -4480570488944706751: 2, -8490246763071062839: 0, 4125796931772932311: 2, -6085225829252042835: 2, 1264240231942625979: 1, -3810458940424335881: 2, -434278980681769573: 3, 8576083764695766075: 0, -3553653312268221045: 2, 6171062830876746071: 2, 866862668785891017: 3, 4425262372260240589: 2, 2565381881410286569: 3, -6444980863967249079: 4, 7022189280822859857: 6, 9010007636962167093: 0, 7075155518271052399: 1, 5586279598528125625: 2, 343867301935668129: 5, -3850101729803890343: 4, 4652676515666083329: 2, -4529913837813264431: 1, 6663833530433165335: 1, -2298603263196020051: 2, -8970794550279201885: 1, 1403783081197708957: 1, -6196275836332892101: 0, 1385377563307555051: 5, -6876087944342266189: 1, 7311932882673944943: 2, 5818139276150996779: 2, 5613413670049549391: 2, 755683728956929349: 2, -3822967658282466577: 0, 3496727551043480535: 2, 8415066184713616047: 6, -6275487395034735739: 4, 4099090236442175103: 4, -3060882612711801781: 2, -8987158298572631647: 6, 284286030864608091: 1, 4066048777256987571: 1, -7318244849366875543: 1, 2995956934402503999: 6, 4119554610212670813: 2, 6054406728903785507: 2, 7543282648646712281: 2, 4699470897909259743: 2, -1467080096730823367: 0, -7297780475596379833: 1, 3840886673943987917: 2, 563226210573886093: 0, 1405861791147872505: 0, -4942857961366286471: 0, 4031675754959330845: 0, -4516839378411806151: 0, 2268503937566632533: 0, 2268466204061465553: 0, -6939198285842561011: 0, -3869216258956585203: 0, 2958034052549629577: 0, -3443197676002104883: 0, 3342145639976333801: 0, 3342107906471166821: 0, -2670722414155689635: 0, -3390685699964529399: 0, 2905522076512054093: 0, -8755878681219058839: 0, -8755916414724225819: 0, 6682448265486038521: 0, -4601005687207105527: 5, 5771809808178641197: 2, 3367833768898370745: 2, -2258686879697127135: 2, -5463572366597991415: 1, -5463610100103158395: 2, -2964667117010049079: 0, -205990120472521859: 0, -9181897264173539159: 0, -9181934997678706139: 0, 3820676198968389605: 0, 7727364484070718145: 0, 2479465760052406793: 0, 3820638465463222625: 0, 6724638537985168549: 0, -3230385799035316275: 0, 3506394732144413209: 0, -4417576938551368835: 0, 3932413315098893529: 0, -7728987442632219403: 0, -7729025176137386383: 0, -7110800892056617143: 0, -1347594911665393027: 0, 862431288212917721: 0, 7647774604191356405: 0, 7647736870686189425: 0, 3214265896593216217: 5, 2833830271859900193: 2, 6305813305217111749: 5, 8565440042673726693: 5, -8401551902916732419: 4, -8401589636421899399: 4, -921576328710912707: 0, -8723496019830824279: 0, 7221756021236876085: 0, 7221718287731709105: 0, 5863766987267525977: 0, -3086163992417186915: 0, 436374971753270421: 0, 5863729253762358997: 0, -2083513513341971279: 0, -5169591344629170179: 0, -149101066864497459: 0, -336062556587977847: 0, 6449280759390460837: 0, 6449243025885293857: 0, -888052178129986917: 0, 1294167618268543275: 2, 95673773467647707: 2, -4202666674717654693: 0, -5480570717200096021: 2, 6180830040531016911: 2, 6180867774036183891: 0, 5427143423803246269: 0, -2374776267316665303: 0, 873036268722717109: 0, 872998535217550129: 0, -6234257333927866663: 0, 3262555760096972061: 0, -5912344780760888555: 0, -6234295067433033643: 0, 4265206239172187697: 0, 3611980566192121655: 0, -2632211160023706421: 5, 5441717418300098471: 6, 5164152827593878727: 2, -4974529967533684813: 2, -1769644480632820533: 4, -1769606747127653553: 2, 8920158981276128615: 5, -2150974101332424589: 1, -5220956128218400397: 2, 4723133920813883155: 3, -5646974711172880717: 0, 6014426046558232215: 0, 6014463780063399195: 4, -3177865339919264025: 2, -6419449973019295965: 1, -7374890400381509485: 3, 6451049610022511923: 2, -334293705955926761: 2, -334255972450759781: 2, 2226173291275137723: 5, -8146642204110609001: 6, -7331976426258982545: 3, -116145516234840669: 2, 3088739970666023611: 1, 3088777704171190591: 2, -3603883922873744345: 0, -7800908983335989805: 3, -8884182266702463741: 4, 91724876998553559: 5, 91762610503720539: 4, 6341218352444963381: 5, -1474053231355358363: 5, -2818826432431688255: 3, -7247141269965744091: 5, -3244845015386168575: 3, 3168770218859674125: 1, 8416518008839777377: 2, 8057554568362535567: 2, 3860529507900290107: 3, 6877105926482159223: 1, 2631933148549397467: 2, -1314070761084467237: 0, 868149035314062955: 0, -4628685257672135013: 0, -2369058520215520069: 4, 6606848623485497231: 5, 6606886356990664211: 0, 2315631226818670317: 0, 7798259738812456737: 0, 3984548465707293061: 0, 3984510732202126081: 0, -6660275916882346983: 0, 2836537177142491741: 0, -5486326197806408235: 0, -6660313650387513963: 0, 3839187656217707377: 0, 7833622747144791721: 4, 4895643210826050717: 2, 7819345881436592201: 2, 293697665859457381: 2, -5903190867514176327: 2, -7440673192979470639: 1, 5758172156711769625: 2, -8197758242347641295: 0, 2220179697506723949: 0, -3948843872341113923: 0, 5001087107343598969: 0, -2946155659760731307: 0, -1742100953889929313: 1, -8010502326886732249: 5, -9208996171687627817: 1, -4799029986583769893: 1, 7199034191293236343: 1, -7147860180467972221: 1, 7053711115308817639: 1, -7777215782876260029: 4, 3293917299732293175: 2, -7020223214541509113: 1, -6608834230872434045: 1, 3339500257953457471: 1, -8321900499777655461: 0, -2351594363063121929: 1, -4768917693786700309: 5, -8452003603352876901: 1, -8040614619683801833: 1, -8006125249316283333: 1, -3906275547367940281: 1, -8151448325300702037: 1, -6842120774882906265: 5, -477089126899042873: 1, 8367415743297062327: 1, -5979478628464146237: 1, 8222092667312643623: 1, 5884811508997829321: 3, 8822791045316570325: 3, 5899088374706028841: 3, -5903228601019343307: 2, -7281634220883002899: 3, -5610462266031192931: 3, 3715051587992922681: 3, -8639782462267145917: 1, -7882789893932395001: 1, -7471400910263319933: 1, -673990504408330889: 2, -2211472829873625201: 1, -3214161042454007817: 1, -2584880907073594149: 5, -6112734614572014581: 1, -1722238760654834121: 1, 4871953941333057763: 1, -6854663054187649745: 1, -7178146965686131733: 3, -6774344674670293705: 1, -1639756550832916489: 1, -7200363257624774025: 1, 4461037500106338907: 1, 4461075233611505887: 1, -2350176362167279209: 5, -1690153754509832749: 5, 8661731752475266687: 2, -8100841849016199545: 5, 2930121981661440187: 5, 1450369853542347683: 5, 1450407587047514663: 2, -2872518001471109129: 3, -3532760041570261765: 1, 2232182310986858091: 1, 6940751851869754987: 1, 155408535891316303: 1, 155446269396483283: 1, 2262070122366268087: 3, -471374998829090505: 1, 1806163728032377771: 1, -4979179587946060913: 1, -4979141854440893933: 1, -3298536584425589449: 3, -1920064913796054629: 1, 581427118845796623: 1, 581464852350963603: 1, 8362864173305523483: 3, -7557396941209691993: 1, 7366808168329402287: 1, 8362901906810690463: 3, -8560047420284907629: 1, -1516313099801092941: 5, 6249915784852491071: 5, 6239733516033221495: 2, -2684694651804918925: 5, 508123745219394995: 5, -971628382899697509: 1, -971590649394530529: 2, -1752593432473918311: 3, 3117576692769844289: 3, -2850744940660767583: 3, -945288379771749699: 3, -2424726357706287263: 3, 4360616958272151421: 3, 4360579224766984441: 3, 6328168750827719091: 2, -6906830003232222057: 1, -120893338300486181: 2, 1033211347995140283: 3, 4803998659686389499: 4, -1981344656292049185: 1, -1981306922786882205: 1, -7820969280825061229: 5, 1863874508001222179: 0, -4411098099307667029: 5, -1501654040797233529: 5, -5347487390931696825: 4, -5347449657426529845: 4, 5902150167873238771: 0, -7332848586186702377: 1, 607192765040659963: 0, -2585625631983653957: 3, -1555326073337568865: 5, -1555288339832401885: 2, -883193148105199913: 4, 4328552171544410555: 1, -6178150550937778721: 3, 7927763837182657655: 4, 5230054976146036799: 3, -6121139609361299009: 2, -1562388180735888329: 3, 5876542375220047335: 2, 7949745456316253291: 2, 8203053887496591823: 3, -3458346870234521109: 2, 3692505588506941175: 4, 8441150908586334283: 0, -7266229764205407701: 1, 974255690788635779: 2, 5384221875892493703: 3, 5899147688775511459: 4, -886195627202927225: 0, -886157893697760245: 1, 499999120448176311: 2, 7938929676404111975: 2, -8434611316209233685: 2, -5582922399318563961: 2, 6078478358412548971: 1, 6078516091917715951: 1, -1959256116015734609: 1, 1749556370791510127: 2, -4113540795147515637: 3, -7738475334281053985: 2, 2951359016262941551: 1, -3833984299715497133: 1, -3833946566210330153: 1, 4603014276922283983: 0, 4595985560289037311: 3, 4588737411214084463: 1, 3434632724918457999: 1, 2596770040605648239: 1, -4188573275372790445: 1, -4188535541867623465: 1, 8781618865054071387: 4, -2700451223040004033: 3, -8908132640320729313: 3, -658598222998328433: 2, 6757182020033583451: 0, 312968184188788963: 3, 313005917693955943: 3, 2355389005897104715: 2, 282185924800898759: 1, -2569502992089770965: 2, 5542114005190593491: 0, 4215878057393834699: 0, 2355426739402271695: 2, 282223658306065739: 1, -2569465258584603985: 2, 4539463526115377855: 0, -7825545039989959783: 4, 8507434287744112985: 3, -8923696548176809055: 3, 4444569215202518997: 3, -8497677965222328735: 3, -1712334649243890051: 3, -1712372382749057031: 3, 3867475923995367411: 3, 626776509357758767: 1, 6624353214488561823: 1, 200757926403278447: 1, -6584585389575160237: 1, -6584547656069993257: 1, 2934203047598637039: 3, 708012219845528499: 1, -6681612071824514957: 1, -5651312513178429865: 1, -5651274779673262885: 1, -3851140268379801645: 3, -6077331096132910185: 1, 3831777397341796655: 1, 1134068536305175799: 1, -2608309888505468041: 3, -2615338605138714713: 3, -3776691440509294025: 1, -3762516958913143145: 1, 3022826357065295539: 1, 6723261164187465991: 1, -5172224109102200647: 3, 1792449876513275549: 3, 2389266353921053417: 3, 1486479854590178341: 1, -7196660954122688583: 3, 8748591086945011781: 3, 8748553353439844801: 3, 5713139856617761483: 2, -6277293978888632013: 2, -6284542127963584861: 1, -7438646814259211325: 2, -4245828417234897405: 1, 451966631780652391: 2, 452004365285819371: 2, 2729891719820865151: 3, 2312128355799357063: 0, 1631740211634015879: 0, 1124937216283304503: 0, -5757884080036027577: 0, -4727584521389942485: 0, -4727546787884775505: 0, -8166518397339383339: 3, -6098509445935839311: 3, -8472488419262480547: 4, -3871081024861649479: 3, 260815287088119053: 3, 260777553582952073: 3, 1150239043934226787: 3, -7124353588131675301: 1, 2248390552121076059: 2, 5526098051966226103: 3, 2333279654941912183: 3, -8581842787183157301: 4, 8607753018650201403: 3, -460139310743279925: 1, 6504534674872196271: 0, 708242241260546059: 3, -2484576155763767861: 3, 3789859474439354379: 5, 4965482109069858175: 0, 6489287003662576863: 1, 6482258287029330191: 3, -1072203459360677201: 0, 5320905451658750879: 1, -646184876406196881: 1, -8785008936461685497: 0, 6139196173077408783: 0, 724220460979746467: 2, -7550372171086155621: 2, 7173282550107951739: 2, 5100079469011745783: 3, -9007861370137637621: 1, 9033771601604681723: 1, 1187300884196751383: 3, 4222753943471901607: 0, 4597172065714145583: 1, 4648772526426381927: 1, -4314881636762943169: 0, -7012590497799564025: 0, 9022912866271779615: 1, -2459157221822295805: 0, -8255449655433946017: 1, 5968132588145073811: 0, -3916646420873777805: 5, -5693230436080872141: 0, 6325204005235158759: 0, -5156866082858916661: 0, 7493585557238984743: 1, -6695918648661254757: 0, 6489324737167743843: 0, 6482296020534497171: 2, -1072165725855510221: 0, 5320943185163917859: 1, -646147142901029901: 1, 8659084658172650483: 0, 9174571936394325121: 3, -8770837106536155091: 3, 2725509847266119849: 3, -9076807128459252299: 6, 7650401845252995529: 3, 865058529274556845: 3, 541473060553013689: 3, 1187338617701918363: 3, 4222791676977068587: 0, 4597209799219312563: 1, 4648810259931548907: 1, -3312155690677393573: 2, -2510643215196868625: 2, 8842054548473709655: 2, -7059212375003009729: 3, 3045762114862059443: 0, -147056282162254477: 2, 152149523929909275: 1, -304376611117526417: 6, -2562778057954922207: 4, -8831179430951725143: 4, -6031096074317837855: 4, 2652128445399811049: 4, 2840826307289187177: 4, 5230345798663442129: 4, 6233034011243824745: 4, -8032386352325734675: 4, 3038746730282818529: 3, -7275393783990983759: 1, -6864004800321908691: 1, 2232292522595022185: 1, -1604076719932213959: 1, -4553013059860709339: 0, -8074186862616974227: 4, -6443504391310889255: 4, 3409121013734561965: 4, 3597818875623938093: 4, 5987338366998193045: 4, 6990026579578575661: 4, -4869801187230252677: 3, -862367623537282737: 6, -4112808618895501761: 6, 1788902776462126311: 2, 7637579537741002475: 3, 5248060046366747523: 6, -4023858953512817617: 3, -1388886769511265889: 3, 1549092766807475115: 3, -631894201176514973: 3, 7617640216145885907: 3, 9053607444913307131: 3, -4561334903096555145: 4, -165548812015078573: 3, 9199966694183937557: 2, 36098423963705457: 1, 7045682015052156529: 1, -3496111892676693723: 2, -8463848737314579755: 1, -6995454091769851323: 2, 3197589753939240337: 1, -4870895022350199795: 3, -4113902454015448879: 0, -3702513470346373811: 3, 3946934101417575873: 3, 1557414610043320921: 3, 554726397462938305: 3, -5809444896767244073: 3, 4802367137575728787: 3, 639617192360961199: 3, 4496397115652631579: 4, -834857154006622649: 3, 3826342191654449975: 3, 5950448428449108875: 3, 2020103552741277191: 3, 9211881344496033859: 3, -3333151333855889685: 4, 6994691295501898615: 3, -6790853432546580377: 3, -4666747195751921477: 3, -2695871265249083611: 3, 6795491281686568541: 4, -5749541396665355003: 4, 6608151530627021501: 4, 1946952184965948877: 1, -177154051828710023: 3, -5002990689079447729: 3, -4807625680223473533: 4, -6186031300087133125: 3, 3807966296208409839: 3, -3192272849384337629: 3, -1166621446552211585: 3, -146426334562400909: 2, -9056453586010542633: 3, -7853472195045410253: 3, 1782314893376283795: 3, 1977679902232257991: 1, -6850783982465027637: 3, 3053383662094587471: 2, -3111903641615985953: 2, 6874240495852255143: 5, 5576741381551675387: 2, 5388043519662299259: 2, 2998524028288044307: 1, -6273394971591520833: 2, 2157971236770731857: 5, -568001499842029159: 4, -6431098665781054923: 3, 8390710868794958345: 2, -2816616505989889567: 2, -7477815851650962191: 0, 8844821985263930525: 1, 7349935838067085377: 3, 3824576419549421589: 3, 3467403179798769241: 3, -3493641460218634503: 3, -4675370741728863623: 3, -1461021147220772191: 3, 6986067749524956469: 3, -4024617272808487713: 2, -499257854290823925: 4, -2469520039373130169: 3, 3087607104642798387: 4, 8000689306987461287: 4, 4786339712479369855: 6, -3660749184266358805: 5, 610401831206125539: 2, -2914957587311538249: 1, 1692148339518916883: 4, -1932786199614621465: 3, -7413678339442512145: 2, -8200555154081732029: 4, -4629599166134091937: 4, -5386428162215745083: 6, 7809747667166496829: 6, 5296076112075856233: 6, 1671141572942317885: 6, 5397370214770750285: 6, -8745059994746151619: 6, -5750296250757873991: 4, 7640874291853782981: 2, -7280510363338104847: 1, -948195610698003799: 2, -4573130149831542147: 5, 1219436797940180365: 2, 3457412356189539965: 3, -992224583987528451: 2, 2919395122855096743: 3, -5377950606120531153: 2, 2451597843387990111: 1, 8214803823779214227: 2, 7893982865615718167: 2, -5891561862432760825: 2, -3767455625638101925: 1, 2774485215685978263: 5, 6299844634203642051: 1, 3984998197779636291: 2, -8560034480572287253: 5, -3646952278227624353: 3, 976682341689122639: 3, 3138353304228107171: 3, -167152652632778169: 4, 5083415591694531535: 4, 300644626834328463: 4, -7225003588742806357: 4, -6588590146546380785: 4, 8643804332655079399: 4, -8800251528474089601: 4, -7027401789576169661: 2, -7495199069043276293: 3, -1731993088652052177: 2, -5844361178568484265: 2, 2608385298845524387: 2, 6179341286793164479: 3, 8773419464884411311: 3, 4698148366392355807: 4, -7846884311959567737: 5, -1173377447546855093: 2, 1689832510301842155: 3, 5611928134908876431: 2, -7549218372030481405: 2, -3748940530353372853: 3, 2152770865004255219: 2, 2397578540400784999: 2, 4609239922328493815: 2, 4431563943086035043: 2, 9039358070858183455: 2, 1209809621349662191: 3, -863393459746543765: 2, 8410719202674203271: 2, -5204223145335659005: 1, 6242281782781145143: 2, -3770219382603739217: 4, -7295578801121403005: 4, -3033057125632647389: 2, -6313407413424486221: 3, 9115821912193991763: 1, 5865567705817954831: 2, -9010220379943956693: 3, 642625448047328281: 2, 4167984866564992069: 3, 8950755831425195141: 4, -2851561144300177007: 2, 1749846250100654061: 2, -8993161640374365767: 2, 5882626445387545757: 3, 5528248026395643343: 3, -4611049460764683201: 3, 6510419414092560127: 3, 7537829577061955951: 3, 242650459625449563: 2, 3813606447573089655: 1, -8086694321614218933: 3, 9003892887245179075: 4, -1193316769141971661: 3, -4692658968235129261: 4, 8645408173272778995: 4, 2716922364263481355: 5, -504831957472891497: 3, -2578035038569097453: 5, 6696077623851649583: 5, -6918864724158212693: 3, -5916176511577830077: 3, 1355719715645373633: 0, -4552287055766627007: 0, 4597304348745405573: 0, -8084497372407026187: 0, -668717129375114303: 0, 6862904502209367829: 0, 8786717560619276965: 0, 8901493379736263049: 0, 1071944930227741785: 0, 6836887282784861641: 0, -4194076547892778091: 0, 3337545083691704041: 0, 5261358142101613177: 0, -3511519702014244243: 0, -6791869989806083075: 0, 4239093840871556657: 0, 1238672516214999037: 0, -5216340849122834611: 0, -8865073070902289031: 0, -8442707880280875103: 0, -4526269836342120819: 0, 548601503434285245: 0, 6663332263397572115: 2, 1412764019070262411: 4, 4266408044795035743: 4, -8415393676357396017: 3, -6979426447589974793: 2, 6532008198258997999: 5, -3150312934470668069: 2, 6504693994335518913: 0, 5412897665457567525: 0, -2950740695658872355: 0, 7964381746466197129: 0, 7807061417510925189: 0, 8524056867414951481: 3, 8841938829904441937: 0, -6681102573194568195: 3, -8754305654290774151: 3, -1104858082526824467: 4, -4415502419730605939: 0, -4497065786481462035: 3, 650869841525366833: 0, -7623722790540535255: 5, 7099931930653572105: 2, -5581869790498859655: 3, 5625457584285988257: 3, -9081211989592017255: 3, -9162775356342873351: 5, 3606150583695213803: 2, 80791165177550015: 2, -8663963671497264977: 2, -8419155996100735197: 2, 872753150764144915: 3, -6207494614173026381: 0, -4630217501044488255: 4, 5344204006601380805: 3, 3271000925505174849: 4, 7382917717330068261: 3, 7609804160065343061: 4, 7528240793314486965: 2, -890143001212942151: 3, 7582179564850740405: 3, 977776176826609937: 6, -6690339359616242723: 3, 5398142778137634245: 3, 2976635150826734973: 5, 6501994569344398761: 5, -7840500511727682619: 5, -2075558159170562763: 5, -3444802343086867643: 5, 864924944442810381: 0, 5182901754906077181: 5, -3816397870106082387: 1, 4672393229403186809: 5, -8055985320511948471: 1, -1383004491111369963: 1, 1435185673873603785: 1, 5535035375821946837: 1, 5534997642316779857: 1, 5353544648301974795: 2, -2461726935498346949: 2, 4737467285290431675: 6, -6434495461715197833: 2, -4123349480375377941: 2, -2975338191810576621: 2, -6497952623008908097: 2, -3662877320895198203: 2, -2911305256010459723: 2, -6904461953995230143: 3, -1141255973604006027: 2, -5253624063520438115: 2, -6072758852463287443: 2, -6072796585968454423: 2, -7115646880613985819: 5, -1397281356819569483: 1, -8922929572396704303: 1, 8093889637565982773: 1, -6253004734195225791: 1, -6253042467700392771: 1, -4804500899274165927: 5, 1449462539581803305: 1, -5751447041742737775: 1, -3941858752855405899: 1, -3941896486360572879: 1, 3548484578037720801: 1, 4300056642922459281: 3, 6070105925328912977: 1, 1957737835412480889: 1, -8036259760883062075: 0, 5162585588808178189: 1, -7179104041890155903: 5, 5549274508024979377: 1, -8041746188308915931: 1, -3796573410376154175: 1, 1653069300124995679: 0, 8498891798035882319: 0, 1299697577247103695: 0, 3205241561526752751: 0, 873678994292623375: 0, -5911664321685815309: 0, -5911626588180648329: 0, -8733037873160381091: 3, -4102490648478506871: 3, 8615554692362321253: 3, 5519317483160975057: 3, 9041573275316801573: 3, -2619827482414311359: 3, -2619865215919478339: 3, 2688529652817254689: 3, -5608816076158373207: 1, 2963448075976699453: 2, 7983938353741372173: 2, 4212699743958584281: 2, -7448701013772528651: 2, -7448738747277695631: 2, 3773492049827706269: 4, -2709107790612463775: 4, 2675340541640856997: 0, -9159661453650428343: 3, 3101359124595337317: 4, -8560041633135775615: 0, -8560079366640942595: 0, -2194049576328780167: 0, 4288550264111389877: 0, -1095898068141930895: 3, 6293726223528112561: 1, 5263426664882027469: 3, 5263388931376860489: 3, 4591293739649658517: 1, -7372850493619723055: 0, 5689445247836507789: 1, -4219663245638199051: 3, -1521954384601578195: 1, 4591256006144491537: 1, -7372888227124890035: 0, 5689407514331340809: 0, -5222389191723748647: 0, 211748762122870293: 2, -2287120168350610251: 2, 2733370109414062469: 1, -8983476085423657631: 2, -2198132769445218947: 2, -2198170502950385927: 2, -2217454340168355499: 3, 2458451686254617705: 6, -8708557662264212867: 2, -1923214346285774183: 2, -1923252079790941163: 3, 663735529328203785: 2, 5914303773655513489: 2, 7376722640504754009: 1, -6394115406781824403: 2, -5757701964585398831: 1, 1027641351393039853: 1, 1027603617887872873: 2, 9065629359016395143: 3, 768283630040767247: 2, -9106196291533711709: 4, -3204484896176083637: 2, -8198074103685471077: 2, 5529664959988931967: 3, 5529702693494098947: 3, 3097275931478898537: 2, 4223304724468383669: 2, 7437654318976475101: 2, -2562076325015221995: 2, -5149026200629199963: 3, 8047149628753041949: 1, -4529523526128055683: 3, 1272411293284402653: 3, -5512932022694036031: 3, 3484072675212111469: 2, 2975306268434246541: 4, 2223734203549508061: 1, 6216890901534278481: 4, -8946502116596873467: 3, -5424175791819816511: 4, 1361167524158622173: 5, 1361129790653455193: 4, 4214102608624183945: 1, -2268497231815986099: 1, 3115951100437334673: 1, 7965250943669690245: 3, 3541969683391814993: 1, -8119431074339297939: 5, -8119468807844464919: 1, 3173980668210540145: 2, 8424548912537849849: 2, 2899062245051095381: 2, 6925129003256046445: 3, -3247456825703062471: 1, 3537886490275376213: 2, 3537848756770209233: 2, 2960027625416313355: 1, -7189370719317610365: 0, 136667291419818167: 1, 6711175960461819655: 3, 1776987014408627959: 0, -6222657441604140197: 0, -6222619708098973217: 0, 2755333029935427729: 5, 8005901274262737433: 1, -4092123046932655207: 5, 6506481364980934029: 3, -4518141629887135527: 5, 5488730462866496617: 5, 7143221394338810425: 1, 4886489209171118981: 1, 1828927070120561825: 1, 5112278125698961493: 3, -5912344869169108063: 4, 5749055888562004869: 1, -7271969085187856239: 1, -2204280671356497: 1, 7373406710429641915: 3, -5599351968300776993: 2, 2519417066619835679: 1, -1592951023296596409: 1, 6488067372384816259: 3, 6488105105889983239: 3, 4550046376433146727: 4, -6067149247767883625: 2, -303943267376659509: 4, -4416311357293091597: 1, -9135316367328240169: 2, -9135278633823073189: 2, 4426172707372707955: 4, -824395536954601749: 4, -7173115289468760725: 2, 1163835614759151467: 3, 3318951905319382175: 0, 4914304051216832527: 4, 4914341784721999507: 4, 5453567726360338389: 1, -8150314234639458039: 1, -1801594482125299063: 2, 7975189073651530565: 1, -4988926488064234631: 4, 4557730250898659301: 1, 4557692517393492321: 0, -6846524657588556423: 3, 6349651171793685489: 3, 931419279526513: 3, -9188860759218456067: 3, 1641251142268336305: 3, 2789262430833137625: 3, -6358431047249598831: 3, -6846562391093723403: 3, 6349613438288518509: 3, 893685774359533: 3, -9188898492723623047: 3, 1641213408763169325: 3, 1786536484747588029: 3, 790427153706235651: 0, 6186359999509577331: 0, 2342599415107992723: 0, 6612378582464057651: 3, 8149860907929351963: 0, -5048984441761888301: 0, 6574495576478379533: 0, -1449860021481855479: 0, 3332910943378347593: 2, 9096116923769571709: 0, -8224598356950494775: 0, -5010248762442403343: 0, 3436764667275451177: 0, 2314722471138950053: 6, 7565290715466259757: 6, -4532733605729132883: 2, 7828313041370367057: 3, -4958752188683613203: 0, 5048119904070018941: 2, 6702610835542332749: 2, 3786164564924768421: 0, 7087775558752989297: 0, 6307785912215960597: 0, -5436267345396883663: 0, -1721020221639225775: 5, 6225095678829062289: 0, -636904055959706451: 0, -8661259653919941463: 0, 1884717291331485725: 0, 3862783250229931497: 1, 5222407466248679673: 0, -849530050549476179: 3, -9146875779525104075: 2, -1317327330016582811: 1, 4445878650374641305: 5, 3273020526302184605: 3, -3512322789676254079: 1, 7783568825291835253: 3, 5586133295733544079: 4, -1775617874307870553: 0, 6796646277827202107: 0, -5748386400524721437: 0, 3188791544691529211: 0, -8472609213039583721: 0, -3046965580107767353: 0, -6216183679991828069: 4, 2081162048983799827: 0, 5172709457607695359: 0, -8613525431033842937: 0, -1828182115055404253: 0, 3597461517876412115: 0, -3464297939038510411: 1, -6507583212380868047: 3, -3450021073330310891: 1, 3194406024653868577: 1, 5505552005993688469: 1, -2494092450019079687: 1, 5650875081978107173: 1, -8004811933572477089: 4, 2144586411161446631: 0, -5607470182530462221: 0, 1630975154849216959: 0, 628286942268834343: 0, -3759714622667589473: 4, 7570230044093262999: 0, -6157056373709604341: 0, 2376376226968024463: 0, 814387636845633685: 1, -162090165677048091: 1, 9131637839789098561: 1, -5905726935892721755: 1, 5125236894784917977: 1, -2955781500896494691: 1, -2955819234401661671: 1, 671773096689138177: 3, 8438001981342722189: 3, 6702610886713806697: 2, -496608455314687807: 0, 2696209941709626113: 3, -5384808453971786555: 3, -5384846187476953535: 3, 9124609123155851889: 3, 9117360974080899041: 1, -3564440747071532719: 1, 3851339495960379165: 1, 6204263283980156945: 1, 6204225550474989965: 1, -5912755652525968427: 3, -7074108487896547739: 1, -7570841692075713303: 1, 2794883985952425645: 1, 2794846252447258665: 1, 5118208178151671305: 4, -6134874463308292079: 1, -8236079844725214087: 1, -8236117578230381067: 1, -2962810217529741363: 3, 216666632688794565: 1, -155099182548968399: 1, 6097223900617121885: 1, 66386110592453365: 2, 7265605452620947869: 3, 4072787055596633949: 1, -6292938622431504999: 1, -6923898753279291631: 1, 8904432606029283825: 0, -6802948066762458159: 0, 4225184562924094409: 0, -8456617158228337351: 0, -1040836915196425467: 0, 6958807540816342689: 0, 6958769807311175709: 0, 963280817891125853: 0, -7256885525169981011: 0, -1491943172612861155: 0, 5923837070419050729: 0, -4523262547277732731: 0, -4523300280782899711: 0, 6098298432259557513: 2, -5383771655834517907: 1, 6855291000594308429: 4, 787293538109960509: 3, 4513522179938392909: 1, -1909481694886802803: 1, -1909519428391969783: 2, -8002679699820814499: 0, -7288235606224511367: 0, -6351841809346022471: 0, 1647802646666745685: 0, 1647764913161578705: 0, -586899456788902615: 0, -9045086774481404063: 0, -5767977596365166199: 0, -5768015329870333179: 0, 7412744999223865541: 0, 4226019999930376765: 0, 4679084287826450281: 0, 7412707265718698561: 0, 5228670479005592401: 0, 5046534713198845677: 1, -2329076277902152735: 3, 5803527281533596593: 1, 6214916265202671661: 1, 3022097868178357741: 1, 5375021656198135521: 1, 5374983922692968541: 1, -688901134006233319: 2, -627226695926485247: 2, -6490323861865511011: 1, 5543838498017993169: 2, -1871941745013918715: 1, 2847063265021229857: 1, 2847025531516062877: 2, 796155620098877695: 1, -3811638507673270717: 2, 6847086257942231087: 3, -1747032410721869309: 3, -3182999639489290533: 3, -2739808778928585481: 3, -2739771045423418501: 3, 4662273012074277157: 2, 6605246065763530129: 0, -3936547841965320123: 1, -2500580613197898899: 4, 8198237411101740333: 2, 8198199677596573353: 1, 1206888121125310441: 3, -9107252393148491847: 4, -8695863409479416779: 4, 6558062267205820917: 3, -3435935329089722047: 1, 1839019523665505365: 4, 2966575341078235375: 3, 7574369468850383787: 2, 5509763371898982379: 3, 6945730600666403603: 3, 6502539740105698551: 3, -5666523534763076057: 3, -1731230713771452261: 1, 5233443271844023935: 3, -4072516902592641297: 1, 4927473249920926727: 1, -66115957588460713: 1, 8014902438092951955: 1, 8014940171598118935: 1, -4741323789187012713: 2, 2223350196428463483: 2, -5230557362249905925: 2, 1917380174505366275: 2, 7551771245599248151: 2, 6856861978435687327: 2, 6856899711940854307: 2, -5897891409294955469: 2, -9203325888466756809: 2, 5008927583129261807: 2, 3579002719382397267: 2, 2884093452218836443: 2, 2884131185724003423: 2, 4050402660836338539: 0, -2889476291584955901: 1, 3744432638913241331: 1, 8345840033314072399: 4, 9197943049100637351: 1, 9197980782605804331: 0, -1809278356590811637: 2, -6663268000400617873: 0, 7671107983392501655: 0, -2322889612903041309: 0, -2775953900799114825: 0, -3774572777968375565: 2, -469138298796574225: 2, 5195277167063823315: 2, 5890186434227384139: 2, 5340600243048242019: 2, -4191137321599757315: 0, 6788711534312095797: 0, 1023769181754975941: 0, 2026046308127149141: 0, 1607633394735832213: 0, 1607595661230665233: 0, 6580535358938876145: 1, -4901534729155199275: 2, -8624624081670643531: 1, -2859681729113523675: 1, -1423714500346102451: 4, 5437829827942399829: 1, 5437792094437232849: 1, 4265353814855007881: 0, 2192150733758801925: 0, -6980480677530002655: 0, -7832583693316567607: 0, -7832621426821734587: 0, -1215538324972882799: 0, -5953070514560606831: 0, -6396616464549146383: 0, -6396654198054313363: 0, 4849218027835864153: 0, -8869549927698664375: 0, -8416485639802590859: 0, 4849180294330697173: 0, -7866899448623448739: 0, 5574498936562797187: 3, -2240772647237524557: 3, -3585545848313854449: 3, -6213541173454375441: 1, -7591946793318035033: 3, 2402050802977507931: 3, 2773816618215270895: 3, 8371039387105448303: 3, 582587686758970631: 3, 8065069365182351095: 4, -1057732036229839161: 3, 7395014441184169491: 3, 6941950153288095975: 3, -2269308952977445673: 3, -6877103080749594085: 3, 554051381019049515: 2, 8515970861543686139: 0, -6248464212565613901: 0, 7366478135444248375: 1, 6913413847548174859: 0, 4954602533560123761: 3, 2257661472483064841: 0, -5571886977025456423: 0, -7645090058121662379: 0, 1629022604299084657: 0, -4681184554861570287: 0, -4228120266965496771: 0, 6102613822124925081: 2, 1109650183918263521: 0, -6719898265590257743: 0, -8793101346686463699: 0, -4454298112126295487: 0, -3080108978400695451: 0, 1989238005963630193: 2, -5386372985137368219: 2, 1605120883931952049: 2, 3157619557967456177: 2, 7269536349792349589: 2, 8417547638357150909: 2, 7414859425776768293: 2, 3808469400907843861: 0, -3658425816889854643: 0, 9023375904262577117: 0, -6392048794782102923: 0, -5842462603602960803: 0, 5466091562709028629: 4, 6223084131043779545: 3, -3974125525343371191: 3, -7700354167171803591: 1, -1277350292346607879: 1, -7555031091187384887: 1, -6181783536346942559: 0, -8254986617443148515: 0, 2614478190875048873: 0, 3164064382054190993: 0, -3150464161682070983: 0, 36260837611417793: 0, -966427374968964823: 0, -2600877970502928863: 0, -8024219777578720679: 0, 3444344527325651209: 2, 6594644933728983057: 2, 5249871732652653165: 2, 387415494631810629: 2, -6061264401200734751: 2, -7209275689765536071: 2, -1961527899785432819: 2, -4887425154365092363: 2, -2125739258448345247: 4, 7763026485732809041: 2, 5009868681407818453: 2, 3861857392843017133: 2, 9109605182823120385: 2, 5148480353608316867: 3, -2666791230192004877: 3, 5162757219316516387: 3, -6639559756408855761: 0, 1976032220023027611: 3, 3199835201169751215: 3, 6087919423977247065: 4, -1287691567123751347: 4, -9117240016632272611: 4, 7256300975981073049: 4, -6851639863168310355: 4, -682767227358680583: 4, -7111076859752201299: 4, 3960056222856351905: 4, -3869492226652169359: 4, -5942695307748375315: 4, 5730848006887162117: 2, -1685455439939063199: 4, 2761927292789391045: 0, -8720142795304684375: 0, 3215864751196913897: 0, -2549077601360205959: 0, 8481886229317433773: 0, 29139751903425121: 0, 5276887541883528373: 0, -17604750784019475: 0, 7748624133869564537: 0, -471542209191542327: 0, 5293400143365577529: 0, 2715182790101946449: 0, 7138100476948213221: 0, -7436216194807018523: 0, -6679223626472267607: 0, -1217336383842375815: 0, -3795553737106006895: 0, 627363949740259877: 0, -1671273842249898667: 0, -502892290246072683: 0, 8886247984046424865: 0, -5137578402816859979: 0, -4249491195513529747: 0, 1257693591050464449: 0, -2559361049553228899: 0, 173426491332737025: 0, -1556672836972846283: 0, -2529762917942014371: 1, -2536791634575261043: 2, -2544039783650213891: 1, 3220902568906905965: 1, 642685215643274885: 1, -581117765503448719: 1, -4958789871017306235: 1, -400038442391895555: 3, 7038892113564040109: 2, 9112095194660246065: 3, -8208168787968281743: 2, 3852167114270551333: 2, 3453194236257664209: 1, -8985853723703466315: 2, 6969050136165851429: 1, 3688699848374012597: 1, -5793418700601189399: 1, 6266917201637643677: 1, 5867944323624756553: 1, 3695947997448965445: 3, 2534595162078386133: 1, -28476348044069543: 1, -6414884519514788083: 1, -6813857397527675207: 1, -5786170551526236551: 2, 7387303894987842341: 1, -2606693701307700623: 1, 2668261151447526789: 1, -5495154224239261715: 1, 129077761755107077: 2, -1944125319341098879: 3, -8744533141190237223: 1, 2394677915219069333: 5, 2916829883035708729: 1, -6718957205385985319: 1, -269895116257780047: 2, -2343098197353986003: 3, -3469578288435009811: 1, 1914141670455326113: 1, 4826533389740792453: 0, 8068118022840824393: 0, 5994914941744618437: 0, 6417280132366032365: 0, -2035466345047976287: 0, 3212281444932126965: 0, 6158274607258622597: 0, 6915267175593373513: 0, 7326656159262448581: 0, -6181745802841775579: 0, 1056699534537903601: 0, 5479617221384170373: 0, -7878503281347071095: 0, -3556562421662344075: 0, -8254948883937981535: 0, -1016503546558302355: 0, 3406414140287964417: 0, 9023413637767744097: 0, 2161413902978975357: 0, -2184885098562128339: 0, 3322299688001865857: 0, -4623967146504630307: 0, 2238032588284138433: 0, -3621278933924247691: 0, 7404750743004423533: 0, -7800408697605096143: 0, 5380313897983935597: 0, -5534808544141133887: 0, 634064091668495885: 0, 3580057253994991517: 0, 4337049822329742433: 0, -3603528449578144499: 0, 9087242040558985713: 0, 8057834574647801453: 0, -6845113082678176439: 0, -1337928296114182243: 0, -6117917400050533963: 0, -5185276883907997415: 0, -8123309345597787907: 0, 4816249941547769513: 0, -6199496287187878771: 0, -5794245540725024831: 0, -2552660907624992891: 0, -7818682385745512767: 0, -368624120911886731: 0, 8002974940841258289: 0, 8759967509176009205: 0, 9060522787228184069: 0, 5818938154128152129: 0, 3637180980152392253: 0, 2882786858205586477: 0, -6630873667950537111: 0, 1695595718689533917: 0, -7056892250905017431: 0, 4604508506826095501: 0, 904073699703925049: 0, 1198674781557984153: 0, 6961880761949208269: 0, 6123566779544859833: 0, -661776536433578851: 0, -985362005155122007: 0, 5877020902214827137: 4, -3853020476615758295: 4, 8968568310838722669: 4, -7218549025414214003: 2, 7382361698160874317: 4, 231509239419412033: 2, 6535862178994727949: 0, -1266057512125183623: 0, -235757953479098531: 0, -1411380588109602327: 0, -249481136983710735: 0, -9199412116668423627: 0, -8196723904088041011: 0, -3949915944105881187: 0, -4289780117421313487: 0, -4805723256069501091: 0, 214767021695171629: 0, -5576063553910655143: 0, 6085337203820457789: 0, -3364402171982946327: 0, -9134836696232457771: 2, 4061339133149784141: 2, -3428490309730803895: 2, 8235321251028164297: 2, -2713399202318855155: 4, 8948001555412257777: 2, -501737820391146339: 2, 187142426480568973: 0, -7614777264639342599: 0, 6112961799035060445: 0, -7760100340623761303: 0, -6598200889497869711: 0, 2898612204526969013: 0, 3901300417107351629: 0, 2398803808408277789: 0, 2058939635092845489: 0, -4055413862652406553: 1, -4473177226673914641: 2, -5153565370839255825: 0, -5660368366189967201: 0, 2057796528093663179: 0, 5758231335215833631: 0, 4916312271876549923: 1, -6783318061578965053: 2, -7738758488941178573: 3, -6755693466364362397: 4, 29649849614076287: 2, -8967354848292071213: 2, -2060771255795577889: 4, -5586130674313241677: 2, 4388290833332627383: 1, -8093561554812034369: 3, 5212703404026985367: 0, -6448697353704127565: 1, 6572327620045733543: 1, -3244882748891335555: 4, 923250786181489525: 3, -6068243082887830743: 4, -4849837252428896203: 0, -4427923359899020951: 1, 6019176257797762509: 0, 6568762448976904629: 0, -5862092529796949159: 2, 5593157674843282189: 1, 6811563505302216729: 2, -1219269079581916671: 2, -216580867001534055: 2, -9088915628099328673: 4, 5832469027092559155: 2, 1728220034455088919: 1, -1815440968276765417: 0, 4969902347701673267: 1, 7151561841530880735: 6, -2863617684616979983: 2, 3869219189928857137: 0, -2479500562585301839: 2, 8043201307807237293: 1, -8143916028445699379: 2, -8838825295609260203: 1, -693857763612073343: 1, 1827462149469378765: 0, 7310090661463165185: 0, 4472642076046250653: 0, -5829134465666114103: 0, -6172182306543389391: 0, 3324630787481449333: 0, 4327319000061831949: 0, 1972785225453797469: 0, 1632921052138365169: 0, 2037447729338131641: 3, 6205581264410956721: 3, -4411614359790073631: 3, 2232812738194105837: 2, -2085102847513529143: 3, -7598339359083562407: 3, -6595651146503179791: 3, -2489005866271853367: 0, 5643597693163895961: 0, 6054986676832971029: 0, -6266833977694184227: 0, 4941464758635688209: 0, 5944152971216070825: 0, -1774561772675550235: 0, -4828231904091821627: 0, -8340037058790390183: 0, 2868261677539482253: 0, 3870949890119864869: 0, -4199349922925994677: 4, 3290479519954593359: 0, 3701868503623668427: 0, 509050106599354507: 2, 8961796584013363159: 0, 7959108371432980543: 0, -5675730865565342143: 0, 7207064912099650465: 0, 9130877970509559601: 0, -4673042652984959527: 0, -4082797190981078067: 0, 520811164140279009: 0, -5572468120119490477: 5, 5044727504081539875: 5, 2971524422985333919: 5, 7083441214810227331: 5, 3528329483672475583: 4, -378614302994251941: 5, -8114589537557056975: 4, -7914649499203669735: 0, 217954060232079593: 0, 629343043901154661: 0, -5717247786515042107: 0, -2720795682078431199: 0, 8258951455056288685: 4, -7200205405607366603: 0, 8192868536685913621: 0, -7790450867611248063: 0, 6052684850976946477: 0, -5845379220110897733: 1, -6708043579648336029: 2, -2603794587010865793: 1, -4676997668107071749: 1, -565080876282178337: 1, 7725209731699427227: 1, -8027136394086657609: 1, 3491218923654527345: 4, 7016578342172191133: 4, -7325916738899890247: 1, 1428248406953704201: 1, -3782255736168035911: 4, 7879145021563077021: 1, -7545993990318892067: 1}
debut_hashtable ={}      
#def negamax_agent(obs, config):
#    debug_out = dict()
def negamax_agent(obs, config, debug_out):
    from random import choice  
    from time import time   
    columns = config.columns
    rows = config.rows
    size = rows * columns   
    column_order = [ columns//2 + (1-2*(i%2)) * (i+1)//2 for i in range(columns)]            
    made_moves = sum(1 if cell != 0 else 0 for cell in obs.board) 
    
    increment_depth = True if made_moves < 22 else False #uses iterative depth solver
    
    total_evals = 0
    
    max_evals = 100000 
    max_depth = 7 if made_moves < 14 else (8 if made_moves < 18 else  (9 if  made_moves<20 else (14 if made_moves<22 else 20) ))       
    #max_depth = max_depth if depth_override is None else depth_override
    #{made_moves :7 if made_moves < 14 else (8 if made_moves < 18 else  (9 if  made_moves<20 else (14 if made_moves<22 else 20) ))        for made_moves in range(25)}        
    
    debug_out['max_depth'] = max_depth
    
    def board_eval(board, moves, column, mark):        
        row = max([r for r in range(rows) if board[column + (r * columns)] == 0])
        score =0 
        if column > 0 and board[row * columns + column - 1] == mark:              #left same mark
            score += 1
        if (column < columns - 1 and board[row * columns + column + 1] == mark):  #right same mark
            score += 1        
        if row > 0 and column > 0 and board[(row - 1) * columns + column - 1] == mark:  #lower left - same mark
            score += 1
        if row > 0 and column < columns - 1 and board[(row - 1) * columns + column + 1] == mark: #lower right - same mark
            score += 1           
        return 0.1*score

    def play(board, column, mark, config):
        columns = config.columns
        rows = config.rows
        row = max([r for r in range(rows) if board[column + (r * columns)] == 0])
        board[column + (row * columns)] = mark
        return row
        
    def undo_play(board, column, row, mark, config):        
        board[column + (row *  config.columns)] = 0

    def is_win(board, column, mark, config, has_played=True):
        columns = config.columns
        rows = config.rows
        inarow = config.inarow - 1
        row = (
            min([r for r in range(rows) if board[column + (r * columns)] == mark])
            if has_played else max([r for r in range(rows) if board[column + (r * columns)] == 0])
        )
    
        def count(offset_row, offset_column):
            for i in range(1, inarow + 1):
                r = row + offset_row * i
                c = column + offset_column * i
                if (r < 0 or r >= rows or c < 0 or c >= columns or board[c + (r * columns)] != mark):
                    return i - 1
            return inarow
    
        return (
            count(1, 0) >= inarow  # vertical.
            or (count(0, 1) + count(0, -1)) >= inarow  # horizontal.
            or (count(-1, -1) + count(1, 1)) >= inarow  # top left diagonal.
            or (count(-1, 1) + count(1, -1)) >= inarow  # top right diagonal.
        )

    def negamax(board, mark, depth, alpha, beta):                 
        moves = sum(1 if cell != 0 else 0 for cell in board) #moves already made

        evals = 0
        # Tie Game
        if moves == size:
            return (0, None, evals)

        # Can win next.
        for column in column_order:
            if board[column] == 0 and is_win(board, column, mark, config, False):                
                return ((size + 1 - moves) / 2, column, evals)
            
        max_score = (size - 1 - moves) / 2	# upper bound of our score as we cannot win immediately
        if beta > max_score:
            beta = max_score                    # there is no need to keep beta above our max possible score.
            if alpha >= beta:               
                return (beta, None, evals)  # prune the exploration if the [alpha;beta] window is empty.                           

        # Recursively check all columns.        
        best_score = -size               
        best_column = None        
        for column in column_order: 
            if board[column] == 0:                
                # Max depth reached. Score based on cell proximity for a clustering effect.
                if depth <= 0:                                        
                    score = board_eval(board, moves, column, mark)                   
                    evals = evals + 1
                else:
                    #next_board = board[:]
                    #play(next_board, column, mark, config)
                    #(score, _, temp_evals) = negamax(next_board, 1 if mark == 2 else 2, depth - 1, -beta, -alpha)
                    
                    play_row = play(board, column, mark, config)
                    (score, _, temp_evals) = negamax(board, 3 - mark, depth - 1, -beta, -alpha)                    
                    undo_play(board, column, play_row, mark, config)   
                    
                    evals = evals + temp_evals
                    score = score * -1            
                if score > best_score:
                    best_score = score
                    best_column = column                     
                alpha = max(alpha, score) # reduce the [alpha;beta] window for next exploration, as we only                                                                   
                #print("mark: %s, d:%s, col:%s, score:%s (%s, %s)) alpha = %s beta = %s" % (mark, depth, column, score,best_score, best_column, alpha, beta))            
                if alpha >= beta:                        
                #if alpha >= beta:                        
                    return (alpha, best_column, evals)  # prune the exploration if we find a possible move better than what we were looking for.                    
                    #print (alpha, best_column)  # prune the exploration if we find a possible move better than what we were looking for.                    
        return (alpha, best_column, evals)
    
    best_column = None
    best_score = None
    if made_moves == 0: #first move
        best_column = columns//2 #first move to the middle
    elif made_moves == 1 and columns == 7: #second move
        prev_move = [c for c in range(columns) if obs.board[c + (rows - 1) * columns] != 0][0]        
        best_column = [3,2,3,3,3,4,3][prev_move] #second move    
    else:
        if increment_depth == True:             
             
             depth_start_time = time()
             
             time_limit = 7.0 #seconds
             my_depth = max_depth  
             
             debug_out['start_depth'] = max_depth
             debug_out['depth_log'] = dict()
        
             while True:
                 run_time_1 = time() 
                 best_score, best_column, temp_evals = negamax(obs.board[:], obs.mark, my_depth, -size, size)
                 total_evals = total_evals  + temp_evals
                 run_time_2 = time()                   
                 debug_out['depth_log'][my_depth] = (run_time_2 - depth_start_time, run_time_2 - run_time_1, best_score, best_column, temp_evals)                                      
                 if my_depth >= size - made_moves or abs(best_score)>=1:
                     break;
                 if time() - depth_start_time + 4*(run_time_2 - run_time_1) > time_limit: # check if we have enought time
                     break;
                 my_depth = my_depth + 1 # increment depth                                  
        else:            
            best_score, best_column, total_evals = negamax(obs.board[:], obs.mark, max_depth, -size, size)                    
            #print('mark: %d, moves: %d, best score %d, best move %d, total moves %d' % (obs.mark, made_moves, best_score, best_column, nodes))        
    debug_out['moves_made'] = made_moves
    debug_out['evals'] = total_evals
    debug_out['best_score'] = best_score
    debug_out['best_column'] = best_column    
     
    if best_column == None:        
        best_column = choice([c for c in range(columns) if obs.board[c] == 0])    
    return best_column

#def negamax_agent_ex(obs, config):    
#    debug_out = dict()
#position_table = {}
DEBUG = True
def negamax_agent_ex(obs, config):    
    from random import choice  
    from time import time     
    
    #global position_table
    position_table = {}
    win_table = {}
    
    total_time = time() 
  
    columns = config.columns
    rows = config.rows
    size = rows * columns   
    column_order = [ columns//2 + (1-2*(i%2)) * (i+1)//2 for i in range(columns)]            
    made_moves = sum(1 if cell != 0 else 0 for cell in obs.board)     
    
    increment_depth = True #uses iterative depth solver
    
    total_evals = 0    
    
    max_depth = 1
    #max_depth = 7 if made_moves < 14 else (8 if made_moves < 18 else  (9 if made_moves < 20 else (14 if made_moves < 22 else 20) ))       
    #max_depth = max_depth if depth_override is None else depth_override
    #{made_moves :7 if made_moves < 14 else (8 if made_moves < 18 else  (9 if  made_moves<20 else (14 if made_moves<22 else 20) ))       for made_moves in range(25)}        

    if DEBUG:
        obs.debug = {}    
        obs.debug['max_depth'] = max_depth    
    
    
    #v1 of the evaluation function
    def board_eval_ex_v1(board, moves, row, column, mark, config):        
        columns = config.columns
        rows = config.rows
        inarow = config.inarow - 1  
        inv_mark = 3 - mark
    
        def count(offset_row, offset_column):
            for i in range(1, inarow + 1):
                r = row + offset_row * i
                c = column + offset_column * i
                if (r < 0 or r >= rows or c < 0 or c >= columns or board[c + (r * columns)] == inv_mark):
                    return i - 1
            return inarow
        score = 0 
        
        if  count(1, 0) + count(-1, 0) >= inarow:
            score += 1            
        if  count(0, 1) + count(0, -1) >= inarow:
            score += 1
        if  count(-1, -1) + count(1, 1) >= inarow:
            score += 1
        if  count(-1, 1) + count(1, -1) >= inarow:
            score += 1    
        return 0.1*score
    
    #v3 of the evaluation function
    def board_eval_ex_v2(board, moves, row, column, mark, config):        
        columns = config.columns
        rows = config.rows
        inarow = config.inarow - 1  
        inv_mark = 3 - mark
    
        def count(offset_row, offset_column):
            for i in range(1, inarow + 1):
                r = row + offset_row * i
                c = column + offset_column * i
                if (r < 0 or r >= rows or c < 0 or c >= columns or board[c + (r * columns)] == inv_mark):
                    return i - 1
            return inarow
        score = 0
        score += max(0, 1 + count( 1,  0) + count(-1,  0) - inarow)           
        score += max(0, 1 + count( 0,  1) + count( 0, -1) - inarow)           
        score += max(0, 1 + count(-1, -1) + count( 1,  1) - inarow)           
        score += max(0, 1 + count(-1,  1) + count( 1, -1) - inarow)           
        return 0.01*score
    
    def board_eval_ex_v3(board, moves, row, column, mark):        
        def board_eval_internal(board, moves, row, column, mark):        
            inarow = config.inarow - 1  
            inv_mark = 3 - mark        
        
            def count(offset_row, offset_column):
                for i in range(1, inarow + 1):
                    r = row + offset_row * i
                    c = column + offset_column * i
                    if (r < 0 or c < 0 or r >= rows or c >= columns or board[c + (r * columns)] == inv_mark):
                        return i - 1
                return inarow
            score = 0
            score += max(0, 1 + count( 1,  0) + count(-1,  0) - inarow)           
            score += max(0, 1 + count( 0,  1) + count( 0, -1) - inarow)           
            score += max(0, 1 + count(-1, -1) + count( 1,  1) - inarow)           
            score += max(0, 1 + count(-1,  1) + count( 1, -1) - inarow)           
            return score
    
        inv_mark = 3 - mark       
        score = 0

        for index in range(size):
            if board[index] != 0: 
                r = index // columns
                c = index %  columns
                if board[index] == mark:                
                    score += board_eval_internal(board, moves, r, c, mark)       
                else:# board[index] == inv_mark:
                    score -= board_eval_internal(board, moves, r, c, inv_mark)                
        
        return 0.01*score  
    
    #eval v4 - counts possibilities
    def board_eval_ex_v4(board, moves, row, column, mark, config):        
        def board_eval_ex4_internal(board, moves, row, column, mark, config):        
            inarow = config.inarow - 1  
            inv_mark = 3 - mark         
        
            def count(offset_row, offset_column):
                for i in range(1, inarow + 1):
                    r = row + offset_row * i
                    c = column + offset_column * i
                    if (r < 0 or r >= rows or c < 0 or c >= columns or board[c + (r * columns)] == inv_mark):
                        return i - 1
                return inarow
            
            def count_act(offset_row, offset_column):
                for i in range(1, inarow + 1):
                    r = row + offset_row * i
                    c = column + offset_column * i
                    if (r < 0 or r >= rows or c < 0 or c >= columns or board[c + (r * columns)] != mark):
                        return i - 1
                return inarow
            score = 0
            score += max(0, 1 + count( 1,  0) + count(-1,  0) - inarow) * (count_act( 1,  0) + count_act(-1,  0))           
            score += max(0, 1 + count( 0,  1) + count( 0, -1) - inarow) * (count_act( 0,  1) + count_act( 0, -1))        
            score += max(0, 1 + count(-1, -1) + count( 1,  1) - inarow) * (count_act(-1, -1) + count_act( 1,  1))
            score += max(0, 1 + count(-1,  1) + count( 1, -1) - inarow) * (count_act(-1,  1) + count_act( 1, -1)) 
            return score 
        
        inv_mark = 3 - mark          
        score = board_eval_ex4_internal(board, moves, row, column, mark, config)
        for r in range(rows):      
            for c in range(columns):
                if board[c + (r * columns)] == mark:
                    score += board_eval_ex4_internal(board, moves, r, c, mark, config)            
                elif board[c + (r * columns)] == inv_mark:
                    score -= board_eval_ex4_internal(board, moves, r, c, inv_mark, config)                                
        return 0.01*score
    
    def board_eval_ex_v5(board, moves, row, column, mark, config):        
        def board_eval_ex5_internal(board, moves, row, column, mark, config):        
            inarow = config.inarow - 1  
            inv_mark = 3 - mark             
            
            def count(offset_row, offset_column):
                for i in range(1, inarow + 1):
                    r = row + offset_row * i
                    c = column + offset_column * i
                    if (r < 0 or r >= rows or c < 0 or c >= columns or board[c + (r * columns)] != mark):
                        return i - 1
                return inarow
            score = 0
            score += max(0, 1 + count( 1,  0) + count(-1,  0) - inarow)
            score += max(0, 1 + count( 0,  1) + count( 0, -1) - inarow) 
            score += max(0, 1 + count(-1, -1) + count( 1,  1) - inarow)
            score += max(0, 1 + count(-1,  1) + count( 1, -1) - inarow)
            return score 
        
        inv_mark = 3 - mark          
        score = 0
        board[column + (row * columns)] = mark
        for r in range(rows):      
            for c in range(columns):
                if board[c + (r * columns)] == 0:
                    score += board_eval_ex5_internal(board, moves, r, c, mark,     config)                        
                    score -= board_eval_ex5_internal(board, moves, r, c, inv_mark, config)                                
        board[column + (row * columns)]  = 0
        return 0.01*score
    
    #same as v5
    def board_eval_ex_v6(board, moves, row, column, mark, config):        
        def board_eval_ex6_internal(board, moves, row, column, mark, config):        
            inarow = config.inarow - 1  
            inv_mark = 3 - mark             
            
            def count(offset_row, offset_column):
                for i in range(1, inarow + 1):
                    r = row + offset_row * i
                    c = column + offset_column * i
                    if (r < 0 or r >= rows or c < 0 or c >= columns or board[c + (r * columns)] != mark):
                        return i - 1
                return inarow
            score = 0
            score += max(0, count( 1,  0) + count(-1,  0) - 2)
            score += max(0, count( 0,  1) + count( 0, -1) - 2)
            score += max(0, count(-1, -1) + count( 1,  1) - 2)
            score += max(0, count(-1,  1) + count( 1, -1) - 2)
            return score 
        
        inv_mark = 3 - mark          
        score = 0        
        for index in range(size):
            if board[index] == 0:
                r = index // columns
                c = index %  columns
                score += board_eval_ex6_internal(board, moves, r, c, mark,     config)                        
                score -= board_eval_ex6_internal(board, moves, r, c, inv_mark, config) 
        return 0.01*score



    def is_win(board, row, column, mark):
        inarow = config.inarow - 1        
    
        def count(offset_row, offset_column):
            for i in range(1, inarow + 1):
                r = row + offset_row * i
                c = column + offset_column * i
                if (r < 0 or r >= rows or c < 0 or c >= columns or board[c + (r * columns)] != mark):
                    return i - 1
            return inarow
        
      
        result = (
            count(1, 0) >= inarow  # vertical.
            or (count(0, 1) + count(0, -1)) >= inarow  # horizontal.
            or (count(-1, -1) + count(1, 1)) >= inarow  # top left diagonal.
            or (count(-1, 1) + count(1, -1)) >= inarow  # top right diagonal.
        )
        return result
    
    def get_move_row(board, column):        
        for r in range(rows-1, 0, -1):
            if board[column + (r * columns)] == 0:
                return r
        return 0             

    #alpha = minimum score that the maximizing player is assured of
    #beta the maximum score that the minimizing player is assured of
    def negamax(board, mark, depth, alpha, beta, moves, is_root = False):                         
        board_keys =  [0] * columns
        rows_cache = [0] * columns
        evals = 0
        # Tie Game
        if moves == size:
            return (0, None, evals)        

        # Can win next.
        for column in column_order:
            if board[column] == 0:
                row = get_move_row(board, column)
                rows_cache[column] = row
                
                index = column + (row * columns)
                
                board[index] = mark
                board_key = hash(tuple(board)) 
                board[index] = 0         
                
                if board_key in win_table:
                    is_win_res = win_table[board_key]
                else:
                    is_win_res = is_win(board, row, column, mark)
                    win_table[board_key] = is_win_res
                
                board_keys[column] = board_key
                
                evals += 1 
                if is_win_res:
                    return ((size + 1 - moves) // 2, column, evals)
                #rows_cache[column] = row            
            
        max_score = (size - 1 - moves) // 2	# upper bound of our score as we cannot win immediately
        if beta > max_score:
            beta = max_score                    # there is no need to keep beta above our max possible score.
            if alpha >= beta:                
                return (beta, None, evals)  # prune the exploration if the [alpha;beta] window is empty.                             
        

        # Recursively check all columns.        
        best_score = -size               
        best_column = None        
        for column in column_order: 
            if board[column] == 0:
                row  = rows_cache[column]                  
                index = column + (row * columns)
                if depth <= 0:
                    board[index] = mark
                    board_key = board_keys[column] 
                    if board_key in position_table:
                        score = position_table[board_key]
                    else:
                        #score = board_eval_ex_v6(board, moves, row, column, mark, config) 
                        score = board_eval_ex_v3(board, moves, row, column, mark) 
                        position_table[board_key] = score
                        evals += 1
                    board[index] = 0
                else:                                        
                    board[index] = mark #play
                    (score, _, temp_evals) = negamax(board, 3 - mark, depth - 1, -beta, -alpha, moves + 1)                                                              
                    board[index] = 0 #undo play                    
                    evals += temp_evals
                    score = score * -1                
                # if is_root:
                #     print('col:%s, score:%s, alpha:%s, beta:%s, depth:%s' % (column, score, alpha, beta, depth))
                if score > best_score:
                    best_score = score
                    best_column = column                     
                alpha = max(alpha, score)
                if alpha >= beta:                                        
                    break #return beta or best score            
        return (alpha, best_column, evals) #Fail-Hard
    
    best_column = None
    best_score = None
    if made_moves == 0: #first move
        best_column = columns//2 #first move to the middle
    elif made_moves <=8 and columns == 7 and rows == 6 and hash(tuple(obs.board)) in debut_hashtable: #second move        
        best_column =  debut_hashtable[hash(tuple(obs.board))]  - 1
    elif increment_depth == True:             
        depth_start_time = time()
        
        time_limit = 12.0 #seconds
        my_depth = max_depth  
        
        if DEBUG:
            obs.debug['start_depth'] = max_depth
            obs.debug['depth_log'] = dict()                          
         
        while True:                     
            run_time_1 = time() 
            best_score, best_column, temp_evals = negamax(obs.board[:], obs.mark, my_depth, -size, size, made_moves, True)            
            #best_score, best_column, temp_evals = negamax(obs.board[:], obs.mark, my_depth, -1, 1, made_moves)            
            #print('depth: %d, alpha: %f, beta: %f, best score %f' % (my_depth, my_alpha, my_beta, best_score))
            total_evals = total_evals  + temp_evals
            run_time_2 = time()       
            if DEBUG:            
                obs.debug['depth_log'][my_depth] = (run_time_2 - depth_start_time, run_time_2 - run_time_1, best_score, best_column, temp_evals)                                                      
            if my_depth >= size - made_moves or abs(best_score)>=1:
                break
            if (time() - depth_start_time)*2.5 > time_limit: # check if we have enought time
                break
            my_depth = my_depth + 1 # increment depth                                  
        else:            
            best_score, best_column, total_evals = negamax(obs.board[:], obs.mark, max_depth, -size, size, made_moves, True)                    
            
    if DEBUG:
        obs.debug['moves_made'] = made_moves
        obs.debug['evals'] = total_evals
        obs.debug['best_score'] = best_score
        obs.debug['best_column'] = best_column  
        obs.debug['total_time'] = time()  - total_time
     
    if best_column == None:        
        best_column = choice([c for c in range(columns) if obs.board[c] == 0])    
    return best_column
#negamax_agent_ex
#get_win_percentages(negamax_agent_ex, 'negamax', 10)
 

#with random move revaluation ----
#def negamax_agent_hybrid(obs, config):    
#    debug_out = dict()
def negamax_agent_hybrid(obs, config, debug_out):    
    from random import choice
    from random import random
    from time import time    
    from numpy import argsort
 
    columns = config.columns
    rows = config.rows
    size = rows * columns   
    column_order = [ columns//2 + (1-2*(i%2)) * (i+1)//2 for i in range(columns)]            
    made_moves = sum(1 if cell != 0 else 0 for cell in obs.board)         
    
    
    total_evals = 0    
    
    max_depth = 6 
    #max_depth = max_depth if depth_override is None else depth_override
    #{made_moves :7 if made_moves < 14 else (8 if made_moves < 18 else  (9 if  made_moves<20 else (14 if made_moves<22 else 20) ))       for made_moves in range(25)}        
    
    debug_out['max_depth'] = max_depth
    
    #v1 of the evaluation function
    def board_eval_ex_v1(board, moves, row, column, mark, config):        
        columns = config.columns
        rows = config.rows
        inarow = config.inarow - 1  
        inv_mark = 3 - mark
    
        def count(offset_row, offset_column):
            for i in range(1, inarow + 1):
                r = row + offset_row * i
                c = column + offset_column * i
                if (r < 0 or r >= rows or c < 0 or c >= columns or board[c + (r * columns)] == inv_mark):
                    return i - 1
            return inarow
        score = 0 
        
        if  count(1, 0) + count(-1, 0) >= inarow:
            score += 1            
        if  count(0, 1) + count(0, -1) >= inarow:
            score += 1
        if  count(-1, -1) + count(1, 1) >= inarow:
            score += 1
        if  count(-1, 1) + count(1, -1) >= inarow:
            score += 1    
        return 0.1*score


    def is_win(board, row, column, mark, config):
        columns = config.columns
        rows = config.rows
        inarow = config.inarow - 1        
    
        def count(offset_row, offset_column):
            for i in range(1, inarow + 1):
                r = row + offset_row * i
                c = column + offset_column * i
                if (r < 0 or r >= rows or c < 0 or c >= columns or board[c + (r * columns)] != mark):
                    return i - 1
            return inarow
        
        result = (
            count(1, 0) >= inarow  # vertical.
            or (count(0, 1) + count(0, -1)) >= inarow  # horizontal.
            or (count(-1, -1) + count(1, 1)) >= inarow  # top left diagonal.
            or (count(-1, 1) + count(1, -1)) >= inarow  # top right diagonal.
        )
        return result
    
    def get_move_row(board, column, config):        
        columns = config.columns
        rows = config.rows
        for r in range(rows-1, 0, -1):
            if board[column + (r * columns)] == 0:
                return r
        return 0  

    def play_random_game(board, mark, config):        
        columns = config.columns        
        for column in range(columns):
            if board[column] == 0:
                row = get_move_row(board, column, config)                
                if is_win(board, row, column, mark, config):
                    return mark
        #choose the random position if we can win 
        possible_moves = [c for c in range(columns) if board[c] == 0]
        if len(possible_moves) == 0:
            return 0 # tie
        column = choice(possible_moves)
        row = get_move_row(board, column, config)                
        board[column + (row * columns)] = mark        
        return play_random_game(board, 3 - mark , config)    

    def random_board_eval(board, mark, n_rounds = 100):        
        columns = config.columns
        rows = config.rows
        size = rows * columns   
        
        my_board = board[:]     
        scores = [0] * columns
        
        for column in range(columns):
            if my_board[column] == 0:
                row = get_move_row(my_board, column, config)                
                if is_win(my_board, row, column, mark, config):
                    scores[column]  = float('Inf')
                    break
                else:
                    my_board[column + (row * columns)] = mark #play
                    outcome = [play_random_game(my_board[:], 3 - mark, config) for  i in range(n_rounds)] 
                    outcome = [1 if m == mark else ( 0 if m == 0 else -1) for m in outcome ]
                    my_board[column + (row *  columns)] = 0 #undo play    
                    #print('%d %f' % (column, sum(outcome)/len(outcome)))
                    scores[column] = sum(outcome)
        return scores
        

    #alpha = minimum score that the maximizing player is assured of
    #beta the maximum score that the minimizing player is assured of
    def negamax(board, mark, depth, alpha, beta, moves, specified_column_order = None):                         
        #if moves != sum(1 if cell != 0 else 0 for cell in board):
        #    print('move count does not match')
        
        rows_cache = [0] * columns

        evals = 0
        # Tie Game
        if moves == size:
            return (0, None, evals)   
        
        my_column_order = column_order if specified_column_order is None else specified_column_order

        # Can win next.
        for column in my_column_order:
            if board[column] == 0:
                row = get_move_row(board, column, config)  
                evals += 1 
                if is_win(board, row, column, mark, config):
                    return ((size + 1 - moves) / 2, column, evals)
                rows_cache[column] = row
            
        max_score = (size - 1 - moves) / 2	# upper bound of our score as we cannot win immediately
        if beta > max_score:
            beta = max_score                    # there is no need to keep beta above our max possible score.
            if alpha >= beta:                
                return (beta, None, evals)  # prune the exploration if the [alpha;beta] window is empty.                           

        # Recursively check all columns.        
        best_score = -size               
        best_column = None        
        for column in my_column_order: 
            if board[column] == 0:
                row  = rows_cache[column]                            
                if depth <= 0:                                        
                    score = board_eval_ex_v1(board, moves, row, column, mark, config)    
                    evals += 1
                else:                                        
                    board[column + (row * columns)] = mark #play
                    (score, _, temp_evals) = negamax(board, 3 - mark, depth - 1, -beta, -alpha, moves + 1)                                                              
                    board[column + (row *  columns)] = 0 #undo play                    
                    evals += temp_evals
                    score = score * -1
                if score > best_score:
                    best_score = score
                    best_column = column                     
                alpha = max(alpha, score)
                if alpha >= beta:                                        
                    break #return beta or best score   
        return (alpha, best_column, evals) #Fail-Hard
    
    main_start_time = time()
    
    best_column = None
    best_score = None
    if made_moves == 0: #first move
        best_column = columns//2 #first move to the middle
    elif size - made_moves < 20: #end game
        best_score, best_column, temp_evals = negamax(obs.board[:], obs.mark, size - made_moves, -size, size, made_moves)                 
    else:
        best_score, best_column, total_evals = negamax(obs.board[:], obs.mark, max_depth, -size, size, made_moves)                    
        if abs(best_score)<1:
            # find random move
            scores = random_board_eval(obs.board[:], obs.mark, 100) #about 1sec 150    
            best_score =  float('-inf')             
            for column in range(columns):
                if obs.board[column] == 0 and scores[column] > best_score:
                    best_column, best_score = (column, scores[column])            
    
    debug_out['moves_made'] = made_moves
    debug_out['evals'] = total_evals
    debug_out['best_score'] = best_score
    debug_out['best_column'] = best_column    
     
    if best_column == None:        
        best_column = choice([c for c in range(columns) if obs.board[c] == 0])    
    return best_column

#with random move revaluation ----
#def negamax_agent_hybrid(obs, config):    
#    debug_out = dict()
def negamax_agent_mtd(obs, config):        
    from random import choice    
    from time import time    

    position_table = {}
    win_table = {}   
    
    columns = config.columns
    rows = config.rows
    size = rows * columns   
    column_order = [ columns//2 + (1-2*(i%2)) * (i+1)//2 for i in range(columns)]            
    made_moves = sum(1 if cell != 0 else 0 for cell in obs.board)         
    total_time = time()
    
    total_evals = 0        
    
    max_depth = 4  

    if DEBUG:    
        obs.debug = {}    
        obs.debug['max_depth'] = max_depth    
    
    def board_eval_ex_v3(board, moves, row, column, mark, config):        
        def board_eval_internal(board, moves, row, column, mark, config):        
            inarow = config.inarow - 1  
            inv_mark = 3 - mark        
        
            def count(offset_row, offset_column):
                for i in range(1, inarow + 1):
                    r = row + offset_row * i
                    c = column + offset_column * i
                    if (r < 0 or r >= rows or c < 0 or c >= columns or board[c + (r * columns)] == inv_mark):
                        return i - 1
                return inarow
            score = 0
            score += max(0, 1 + count( 1,  0) + count(-1,  0) - inarow)           
            score += max(0, 1 + count( 0,  1) + count( 0, -1) - inarow)           
            score += max(0, 1 + count(-1, -1) + count( 1,  1) - inarow)           
            score += max(0, 1 + count(-1,  1) + count( 1, -1) - inarow)           
            return score
    
        inv_mark = 3 - mark       
        score = 0

        for index in range(size):
            r = index // columns
            c = index %  columns
            if board[index] == mark:                
                score += board_eval_internal(board, moves, r, c, mark, config)       
            elif board[index] == inv_mark:
                score -= board_eval_internal(board, moves, r, c, inv_mark, config)                
        
        return 0.01*score  
    
    def is_win(board, row, column, mark, config):        
        columns = config.columns
        rows = config.rows
        inarow = config.inarow - 1        
    
        def count(offset_row, offset_column):
            for i in range(1, inarow + 1):
                r = row + offset_row * i
                c = column + offset_column * i
                if (r < 0 or r >= rows or c < 0 or c >= columns or board[c + (r * columns)] != mark):
                    return i - 1
            return inarow
        
        result = (
            count(1, 0) >= inarow  # vertical.
            or (count(0, 1) + count(0, -1)) >= inarow  # horizontal.
            or (count(-1, -1) + count(1, 1)) >= inarow  # top left diagonal.
            or (count(-1, 1) + count(1, -1)) >= inarow  # top right diagonal.
        )
        return result
    
    def get_move_row(board, column, config):        
        columns = config.columns
        rows = config.rows
        for r in range(rows-1, 0, -1):
            if board[column + (r * columns)] == 0:
                return r
        return 0     

    #alpha = minimum score that the maximizing player is assured of
    #beta the maximum score that the minimizing player is assured of
    def negamax(board, mark, depth, alpha, beta, moves):                         
        board_keys = [0] * columns 
        rows_cache = [0] * columns
        
        evals = 0
        # Tie Game
        if moves == size:
            return (0, None, evals)   
        
        # Can win next.
        for column in column_order:
            if board[column] == 0:
                row = get_move_row(board, column, config)
                rows_cache[column]  = row
                index = column + (row * columns)                
                board[index] = mark
                board_key = hash(tuple(board)) 
                board[index] = 0                         
                if board_key in win_table:
                    is_win_res = win_table[board_key]
                else:
                    is_win_res = is_win(board, row, column, mark, config)                    
                    win_table[board_key] = is_win_res         
                if is_win_res:
                    return ((size + 1 - moves) // 2, column, evals)
                board_keys[column] = board_key                
                #rows_cache[column] = row            
            
        max_score = (size - 1 - moves) // 2	# upper bound of our score as we cannot win immediately
        if beta > max_score:
            beta = max_score                    # there is no need to keep beta above our max possible score.
            if alpha >= beta:                
                return (beta, None, evals)  # prune the exploration if the [alpha;beta] window is empty.                           

        # Recursively check all columns.        
        best_score = -size               
        best_column = None        
        for column in column_order: 
            if board[column] == 0:
                row  = rows_cache[column]                            
                index = column + (row * columns)
                if depth <= 0:                                        
                    board[index] = mark
                    board_key = board_keys[column]  
                    if board_key in position_table:
                        score = position_table[board_key]
                    else:
                        score = board_eval_ex_v3(board, moves, row, column, mark, config) 
                        position_table[board_key] = score                        
                    board[index] = 0
                else:                                        
                    board[index] = mark #play
                    (score, _, temp_evals) = negamax(board, 3 - mark, depth - 1, -beta, -alpha, moves + 1)                                                              
                    board[index] = 0 #undo play                    
                    evals += temp_evals
                    score = score * -1
                if score > best_score:
                    best_score = score
                    best_column = column                     
                alpha = max(alpha, score)      
                if alpha >= beta:                                        
                    break #return beta or best score                                                   
        return (alpha, best_column, evals) #Fail-Hard  
    
    def MTDF(best_score_guess, board, mark, my_depth, made_moves):
        best_score_it = best_score_guess
        best_column_it = None
        upper_bound = size
        lower_bound = -size        
        
        mtd_it = 0      
        mtdf_evals = 0
             
        while lower_bound < upper_bound:                         
            mtd_it += 1            
            #beta = max(best_score_it, lower_bound + 1)
            beta = best_score_it + 1 if best_score_it == lower_bound else best_score_it            
            best_score_it, best_column_it, temp_evals = negamax(board[:], mark, my_depth, beta - 1, beta, made_moves) 
            #print('%d depth %d score %s, col %s, evals %s, alpha %s,beta %s, upper %s lower %s' % (mtd_it, my_depth, best_score_it, best_column_it, temp_evals, beta - 1, beta, upper_bound, lower_bound ))
            mtdf_evals = mtdf_evals  + temp_evals            
            if best_score_it < beta:
                upper_bound = best_score_it
            else:
                lower_bound = best_score_it
        return best_score_it, best_column_it, mtdf_evals, mtd_it             
    
    main_start_time = time()
    
    best_column = None
    best_score = -size
    if made_moves == 0: #first move
        best_column = columns//2 #first move to the middle    
    else:
        depth_start_time = time()
         
        time_limit = 7.0 #seconds
        my_depth = max_depth  
         
        if DEBUG:  
            obs.debug['start_depth'] = max_depth
            obs.debug['depth_log'] = dict()        

        best_score_guess = 0                 
          
        while True:                     
            run_time_1 = time() 
            best_score, best_column, mtdf_evals, mtd_it = MTDF(best_score_guess, obs.board[:], obs.mark, my_depth, made_moves)
            total_evals = total_evals  + mtdf_evals                     
            run_time_2 = time()                   
            if DEBUG:  
                obs.debug['depth_log'][my_depth] = (run_time_2 - depth_start_time, run_time_2 - run_time_1, best_score, best_column, mtdf_evals, mtd_it)                                      
            if my_depth >= size - made_moves or abs(best_score)>=1:
                break
            if time() - depth_start_time + 4*(run_time_2 - run_time_1) > time_limit: # check if we have enought time
                break
            my_depth = my_depth + 1 # increment depth      
    
    if DEBUG:  
        obs.debug['moves_made'] = made_moves
        obs.debug['evals'] = total_evals
        obs.debug['best_score'] = best_score
        obs.debug['best_column'] = best_column    
        obs.debug['total_time'] = time()  - total_time
     
    if best_column == None:        
        best_column = choice([c for c in range(columns) if obs.board[c] == 0])    
    return best_column

#random position evaluation 
def random_pos_eval(board, mark, config, n_rounds = 100):
    def get_move_row(board, column, config):        
        columns = config.columns
        rows = config.rows
        for r in range(rows-1, 0, -1):
            if board[column + (r * columns)] == 0:
                return r
        return 0 
    def is_win(board, row, column, mark, config):
        columns = config.columns
        rows = config.rows
        inarow = config.inarow - 1        
    
        def count(offset_row, offset_column):
            for i in range(1, inarow + 1):
                r = row + offset_row * i
                c = column + offset_column * i
                if (r < 0 or r >= rows or c < 0 or c >= columns or board[c + (r * columns)] != mark):
                    return i - 1
            return inarow
        
        result = (
            count(1, 0) >= inarow  # vertical.
            or (count(0, 1) + count(0, -1)) >= inarow  # horizontal.
            or (count(-1, -1) + count(1, 1)) >= inarow  # top left diagonal.
            or (count(-1, 1) + count(1, -1)) >= inarow  # top right diagonal.
        )
        return result
    def play_random_game(board, mark, config):        
        columns = config.columns        
        for column in range(columns):
            if board[column] == 0:
                row = get_move_row(board, column, config)                
                if is_win(board, row, column, mark, config):
                    return mark
        #choose the random position if we can win 
        possible_moves = [c for c in range(columns) if board[c] == 0]
        if len(possible_moves) == 0:
            return 0 # tie
        column = choice(possible_moves)
        row = get_move_row(board, column, config)                
        board[column + (row * columns)] = mark        
        return play_random_game(board,  3 - mark , config)              
        
   
    columns = config.columns
    ratings = dict()
    for column in range(columns):
        if board[column] == 0:
            row = get_move_row(board, column, config)                
            if is_win(board, row, column, mark, config):
                ratings[column] = 1
            else:
                board[column + (row * columns)] = mark #play
                outcome = [play_random_game(board[:],3 - mark, config) for  i in range(n_rounds)] 
                outcome = [1 if o == mark else ( 0 if o == 0 else -1) for o in outcome ]
                board[column + (row *  columns)] = 0 #undo play    
                print('%d %f' % (column, sum(outcome)/len(outcome)))
                ratings[column] = sum(outcome)/len(outcome)
    return ratings 

def random_agent_ex(obs, config):    
    from random import choice  
    from time import time      
    
    def get_move_row(board, column, config):        
        columns = config.columns
        rows = config.rows
        for r in range(rows-1, 0, -1):
            if board[column + (r * columns)] == 0:
                return r
        return 0 
    def is_win(board, row, column, mark, config):
        columns = config.columns
        rows = config.rows
        inarow = config.inarow - 1        
    
        def count(offset_row, offset_column):
            for i in range(1, inarow + 1):
                r = row + offset_row * i
                c = column + offset_column * i
                if (r < 0 or r >= rows or c < 0 or c >= columns or board[c + (r * columns)] != mark):
                    return i - 1
            return inarow
        
        result = (
            count(1, 0) >= inarow  # vertical.
            or (count(0, 1) + count(0, -1)) >= inarow  # horizontal.
            or (count(-1, -1) + count(1, 1)) >= inarow  # top left diagonal.
            or (count(-1, 1) + count(1, -1)) >= inarow  # top right diagonal.
        )
        return result
    def play_random_game(board, mark, config):        
        columns = config.columns        

        #check if we can win
        for column in range(columns):
            if board[column] == 0:
                row = get_move_row(board, column, config)                
                if is_win(board, row, column, mark, config):
                    return mark
        #choose the random position if we can't win 
        possible_moves = [c for c in range(columns) if board[c] == 0]
        if len(possible_moves) == 0:
            return 0 # tie
        column = choice(possible_moves)
        row = get_move_row(board, column, config)                
        board[column + (row * columns)] = mark        
        return play_random_game(board, 3 - mark, config)  

    def random_board_eval(board, mark, n_rounds = 100):        
        columns = config.columns
        rows = config.rows
        size = rows * columns   
        
        my_board = board[:]     
        scores = [0] * columns
        
        for column in range(columns):
            if my_board[column] == 0:
                row = get_move_row(my_board, column, config)                
                if is_win(my_board, row, column, mark, config):
                    scores[column] = float('Inf')
                    break                    
                else:
                    my_board[column + (row * columns)] = mark #play
                    outcome = [play_random_game(my_board[:], 3 - mark, config) for  i in range(n_rounds)] 
                    outcome = [1 if m == mark else ( 0 if m == 0 else -1) for m in outcome ]
                    my_board[column + (row *  columns)] = 0 #undo play                        
                    scores[column] = sum(outcome)
        return scores           
        
    columns = config.columns
    rows = config.rows
    size = rows * columns  
    
    main_start_time = time()        

    agg_scores = [0]*columns    
    while True:       
        scores = random_board_eval(obs.board[:], obs.mark, 64) #about 1sec 150        
        for i in range(columns):
            agg_scores[i] = agg_scores[i] + scores[i]     
        if time() - main_start_time > 2.0: #0.86  
            break    
    best_score = float('-inf')
    best_column = 0
    for column in range(columns):
        if obs.board[column] == 0 and agg_scores[column] > best_score:
            best_column, best_score = (column, agg_scores[column])
            
    #print('random agent (%f sec) best col: %s %s' % (time() - main_start_time,  best_column, agg_scores) )                                    
    return best_column
#get_win_percentages(random_agent_ex, 'negamax', 100)
    
# This agent random chooses a non-empty column.
#configuration = {'timeout': 5, 'columns': 7, 'rows': 6, 'inarow': 4, 'steps': 1000}
#observation = {'board': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'mark': 1}
def random_agent(observation, configuration):    
    from random import choice
    return choice([c for c in range(configuration.columns) if observation.board[c] == 0])

#get_win_percentages(random_agent, 'random', 10)

#%% Test
    
env.reset()
# Play as the first agent against default "random" agent.
#env.run([my_agent, "random"])
#env.run([my_agent, "negamax"])
#env.run([negamax_agent, "negamax"])
#env.run(["negamax", negamax_agent])
#env.run([negamax_agent, negamax_agent])
#env.run(["negamax", negamax_agent])
#env.run([negamax_agent, "random"])
env.run([negamax_agent, "negamax"])
#env.run([negamax_agent, negamax_agent])
env.render()

#%% Debug Game 
plays_folder = 'D:/Github/KaggleSandbox/connect_x/games/'
play_filename = '5982532.json' #slow game
play_filename = '5984148.json' #lost game
play_filename = '6059058.json' #
play_filename = '6060038.json' #long game
play_filename = '6366313.json' #lost game
play_filename = '6522402.json' #lost game
play_filename = '6632936.json'
play_filename = '6676798.json'
play_filename = '7251262.json'

with open(plays_folder + play_filename, 'r') as outfile:
    game_log = json.load(outfile)

[s[0]['observation']['remainingOverageTime'] for s in game_log['steps']]
[s[0]['observation']['mark'] for s in game_log['steps']]

step_id = 0
board = game_log['steps'][step_id][0]['observation']['board']
mark =  game_log['steps'][step_id][0]['observation']['mark']
print_board(board)

debug_out = dict()
negamax_agent_mtd(structify({'board':board, 'mark':mark}) , config, debug_out)
print(debug_out)

for i, s in enumerate(game_log['steps']):    
    print('remainingOverageTime %s' % s[0]['observation']['remainingOverageTime'])

#debug_out = dict()
#negamax_agent(structify({'board':board, 'mark':mark}) , config, debug_out)
#print(debug_out)

for i, s in enumerate(game_log['steps']):    
    board = s[0]['observation']['board']
    if len([c for c in range(columns) if board[c] == 0])==0:
        break;
    mark =  1 + i % 2
    debug_out = dict()
    negamax_agent_ex(structify({'board':board, 'mark':mark}) , config, debug_out)
    #negamax_agent_ex(structify({'board':board, 'mark':mark}) , config, debug_out)
    print('%d column: %d, evals: %d, score: %f, depth: %d, time: %f sec' % (i+1, debug_out['best_column'], debug_out['evals'], 0 if debug_out['best_score'] is None else debug_out['best_score'], max(debug_out['depth_log'].keys()) if 'depth_log' in debug_out else 0, debug_out['depth_log'][max(debug_out['depth_log'].keys())][0] if 'depth_log' in debug_out else 0))

move_index = 18-1# can win in 13 moves?
board = game_log['steps'][move_index][0]['observation']['board']
debug_out = dict()
mark = 1 + move_index % 2
negamax_agent_ex(structify({'board':board, 'mark':mark}) , config, debug_out)
negamax_agent_mtd(structify({'board':board, 'mark':mark}) , config, debug_out)

negamax_agent(structify({'board':board, 'mark':mark}) , config, debug_out)
random_agent_ex(structify({'board':board, 'mark':mark}) , config)
negamax_agent_hybrid(structify({'board':board, 'mark':mark}) , config, debug_out)


print_board(board)
random_pos_eval(board, mark, config, 400)

#4.4 s ± 44.5 ms per loop, depth 14
%timeit negamax_agent_ex(structify({'board':board, 'mark':mark}) , config, debug_out) 
%timeit random_agent_ex(structify({'board':board, 'mark':mark}) , config)  #1000 rounds - 2.6 sec
    
    
#%% Debug Negamax
    
mark = 1

moves = '44444343331156666656' #445264
moves = '44444343331156666651' #445264
moves = '743454445455236' #445264, next move shoudl be 6
moves = '4444'
        
debug_out = dict()
board = columns * rows * [0]
mark = play_moves(moves, board, config)    
obs = structify({'board':board, 'mark':mark})
negamax_agent_ex(obs , config)
obs.debug

negamax_agent_mtd(structify({'board':board, 'mark':mark}) , config, debug_out)
negamax_agent_hybrid(structify({'board':board, 'mark':mark}) , config, debug_out)
random_agent(structify({'board':board, 'mark':mark}) , config)
random_agent_ex(structify({'board':board, 'mark':mark}) , config)

negamax_agent_mtd(structify({'board':board, 'mark':mark}) , config, debug_out)
print(debug_out)

negamax_agent(structify({'board':board, 'mark':mark}) , config, debug_out)

negamax_agent_ex(structify({'board':board, 'mark':mark}) , config)
negamax_agent(structify({'board':board, 'mark':mark}) , config, 8)
negamax_agent(structify({'board':board, 'mark':mark}) , config, 13)

#3.79 s ± 595 ms
%timeit negamax_agent(structify({'board':board, 'mark':mark}) , config, debug_out)
cProfile.run("negamax_agent(structify({'board':board, 'mark':mark}) , config, debug_out) ")

%timeit negamax_agent_ex(structify({'board':board, 'mark':mark}) , config, debug_out)
cProfile.run("negamax_agent_ex(structify({'board':board, 'mark':mark}) , config, debug_out) ")

print_board(board)
    
board = [0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 1, 1, 1, 2, 0, 0, 0, 1, 2, 2, 1, 2, 0, 1, 2, 2, 2, 1, 2, 0]
board = [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 2, 2, 0, 2, 1, 0, 0, 1, 1, 0, 2, 2, 0, 0, 1, 1, 2, 2, 2, 0, 0, 1, 1, 2, 1, 2, 0, 0]

moves = sum(1 if cell != 0 else 0 for cell in board)
[board_eval(board, moves, column, mark)  for column in range(columns) if board[column]==0]

[board[column] == 0 and is_win(board, column, mark, config, False) for column in range(columns)]

for column in range(columns):
    if board[column] == 0:
        next_board = board[:]
        play(next_board, column, mark, config)
        (score, _) = negamax(next_board, 3 - mark, 10, -size, size)
        score = score * -1   
        print(column, score)
    
best_score, best_column = negamax(board[:], mark, 20, -size, size)  

negamax_agent(structify({'board':board, 'mark':1}) , config)

# position analyzer
# https://connect4.gamesolver.org/en/
moves = '4444233' #next should be 3 but algo picks 6
#moves = '444423366' #next should be 3 but algo picks 6
board = columns * rows * [0]
mark = play_moves(moves, board, config)    
print_board(board)

#negamax_agent(structify({'board':board, 'mark':mark}) , config)+1
negamax_agent_ex(structify({'board':board, 'mark':mark}) , config)+1



#%% Debug move
board = [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 2, 2, 0, 2, 1, 0, 0, 1, 1, 0, 2, 2, 0, 0, 1, 1, 2, 2, 2, 0, 0, 1, 1, 2, 1, 2, 0, 0]
negamax_agent(structify({'board':board, 'mark':1}) , config)


#%% Profile
#1.69 s ± 21.1 ms per loop 
env.reset()
trainer = env.train([None, "negamax"])

observation = trainer.reset()

my_action = negamax_agent_ex(observation, env.configuration)    
observation, reward, done, info = trainer.step(my_action)   

#is_win(observation.board, 2, observation.mark, env.configuration)
%timeit negamax_agent_ex(observation, env.configuration)  
cProfile.run('negamax_agent_ex(observation, env.configuration)  ')

#%% Debug
# Play as first position against random agent.
env.reset()
#trainer = env.train([None, negamax_agent])
trainer = env.train([None, "negamax"])
#trainer = env.train(["random", None])

observation = trainer.reset()

while not env.done:
    #my_action = my_agent(observation, env.configuration)    
    start_time = time.time()
    my_action = negamax_agent(observation, env.configuration)    
    observation, reward, done, info = trainer.step(my_action)    
    print("My Action[%d]: %s, %s [%s] %s sec" % (len(env.steps), my_action, reward, done, time.time() - start_time))
    #env.render(mode="ipython", width=100, height=90, header=False, controls=False)
env.render()

#%% Timing 

def get_timing(run_id, test_agent = "negamax"):        
    env.reset()
    #trainer = env.train([None, negamax_agent])
    #trainer = env.train([None, "negamax"])
    #trainer = env.train(["random", None])  
    #trainer = env.train([test_agent, None])    
    trainer = env.train([None, test_agent])    
    observation = trainer.reset()    
    result = list()    
    while not env.done:        
        start_time = time()
        debug_out = dict()
        my_action = negamax_agent_ex(structify(observation), env.configuration, debug_out)    
        observation, reward, done, info = trainer.step(my_action)    
        if 'depth_log' in debug_out:
            res = debug_out['depth_log']
            min_d = min(res.keys())
            max_d = max(res.keys())
            prev_depth = max_d - 1 if max_d > min_d else max_d
                                 
            result.append((run_id, test_agent, debug_out['moves_made'],debug_out['max_depth'], min_d, max_d,len(res), res[max_d][0], res[max_d][1],res[prev_depth][1], res[max_d][4],  time() - start_time, debug_out['best_score'], debug_out['best_column'], debug_out['evals']  ))     
        else:
            result.append((run_id, test_agent, debug_out['moves_made'],debug_out['max_depth'], None,None, None, None,None,None,None, time() - start_time, debug_out['best_score'],debug_out['best_column'], debug_out['evals'] ))     
    return result
    
import pandas as pd
timing_results = list()
for i in range(100):       
    print(i)
    timing_results.extend(get_timing(i))
    #timing_results.extend(get_timing(i, "random"))    

res = pd.DataFrame(timing_results, columns = ['run_id', 'test_agent', 'moves','init_depth', 'min_depth', 'max_depth', 'depth_it', 'cum_depth_time', 'depth_time_cur', 'depth_time_prev', 'depth_evals', 'elapsed', 'best_score', 'best_column', 'evals'])
res.to_csv(os.path.join(DATA_FOLDER, 'timing.csv'))      

#res.plot('move', 'elapsed')
  

#%% Evaluate
def mean_reward(rewards):
    return 100*sum(r[0] for r in rewards) /len(rewards)

def get_win_percentages(agent1, agent2, n_rounds=100):
    # Use default Connect Four setup
    config = {'rows': 6, 'columns': 7, 'inarow': 4}
    # Agent 1 goes first (roughly) half the time         
    outcomes = evaluate("connectx", [agent1, agent2], config, [], n_rounds//2)
    # Agent 2 goes first (roughly) half the time      
    outcomes += [[b,a] for [a,b] in evaluate("connectx", [agent2, agent1], config, [], n_rounds-n_rounds//2)]
    print("Agent 1 Win Percentage:", np.round(outcomes.count([1,-1])/len(outcomes), 2))
    print("Agent 2 Win Percentage:", np.round(outcomes.count([-1,1])/len(outcomes), 2))
    print("Number of Invalid Plays by Agent 1:", outcomes.count([None, 0]))
    print("Number of Invalid Plays by Agent 2:", outcomes.count([0, None]))

#agent_mtd      = utils.get_last_callable(utils.read_file(DATA_FOLDER + "submission_MTD_v2.py"))
#agent_negamax  = utils.get_last_callable(utils.read_file(DATA_FOLDER + "submission_it_v2_ex.py")) # best scoring
agent_negamax  = utils.get_last_callable(utils.read_file(DATA_FOLDER + "submission_it_v2_ex.py")) # best scoring
agent_negamax_v2  = utils.get_last_callable(utils.read_file(DATA_FOLDER + "submission_NEG_v2.py"))
agent_negamax_v7  = utils.get_last_callable(utils.read_file(DATA_FOLDER + "submission_NEG_v7b.py")) 
agent_negamax_v8  = utils.get_last_callable(utils.read_file(DATA_FOLDER + "submission_NEG_v8.py")) 
#agent_negamax_hyb  = utils.get_last_callable(utils.read_file(DATA_FOLDER + "submission_HYB_v3.py")) 
#get_win_percentages(agent_mtd, 'random', 1)
#get_win_percentages(agent_mtd, 'random', 1)

get_win_percentages('random', 'random', 10)

#get_win_percentages(agent_negamax_hyb, 'random', 10)
#get_win_percentages(agent_negamax_hyb, 'negamax', 100)

get_win_percentages(agent_negamax_v8, 'random', 10)
get_win_percentages(agent_negamax_v8, 'negamax', 10)
get_win_percentages(agent_negamax_v8, agent_negamax_v7, 10)
get_win_percentages(agent_negamax_v7, agent_negamax_v8, 10)

get_win_percentages(agent_negamax_v9, 'random', 10)
get_win_percentages(agent_negamax_v9, 'negamax', 10)
get_win_percentages(agent_negamax_v9, agent_negamax, 10)

get_win_percentages(agent_mtd, 'negamax', 10)
get_win_percentages(agent_negamax, 'negamax', 10)
get_win_percentages(agent_negamax,agent_mtd, 10)


#sanity check 
get_win_percentages(random_agent, 'random', 10)
get_win_percentages(random_agent_ex, 'random', 10)

get_win_percentages(random_agent, 'negamax', 10)
get_win_percentages(random_agent_ex, 'negamax', 10)

get_win_percentages(negamax_agent_ex, 'random', 1)

get_win_percentages(negamax_agent_hybrid, 'random', 10)
get_win_percentages(negamax_agent_hybrid, 'negamax', 10)


get_win_percentages('random', 'random', 10)

get_win_percentages('random', 'random_agent_ex', 10)

get_win_percentages('random_agent', 'random', 10)

print("My Agent vs Random Agent:", mean_reward(evaluate("connectx", [random_agent_ex, "random"], num_episodes=10)))
print("My Agent vs Random Agent:", mean_reward(evaluate("connectx", [random_agent_ex, "negamax"], num_episodes=10)))
# Run multiple episodes to estimate its performance.
#print("My Agent vs Random Agent:", mean_reward(evaluate("connectx", [my_agent, "random"], num_episodes=10)))
#print("My Agent vs Negamax Agent:", mean_reward(evaluate("connectx", [my_agent, "negamax"], num_episodes=10)))

#vs random
print("My Agent vs Random Agent:", mean_reward(evaluate("connectx", [negamax_agent, "random"], num_episodes=10)))
print("My Agent vs Random Agent:", mean_reward(evaluate("connectx", [negamax_agent_ex, "random"], num_episodes=10)))

#vs negamax
print("My Agent vs Negamax Agent:", mean_reward(evaluate("connectx", [negamax_agent,    "negamax"], num_episodes=10)))
print("My Agent vs Negamax Agent:", mean_reward(evaluate("connectx", [negamax_agent_ex, "negamax"], num_episodes=10)))

#vs each other
print("My Agent vs My AgentEx:", mean_reward(evaluate("connectx", [negamax_agent, negamax_agent_ex], num_episodes=3)))

    
print("My Agent vs Random Agent:", mean_reward(evaluate("connectx", [negamax_agent, negamax_agent_ex], num_episodes=1)))
print("My Agent vs Random Agent:", mean_reward(evaluate("connectx", [negamax_agent_submit, "random"], num_episodes=10)))
print("My Agent vs Random Agent:", mean_reward(evaluate("connectx", [negamax_agent_iterative, "random"], num_episodes=10)))

print("My Agent vs Random Agent:", mean_reward(evaluate("connectx", [negamax_agent, "random"], num_episodes=10)))
print("My Agent vs Negamax Agent:", mean_reward(evaluate("connectx", [negamax_agent, "negamax"], num_episodes=10)))
print("Negamax vs My Agent:", mean_reward(evaluate("connectx", ["negamax", negamax_agent], num_episodes=10)))
print("My Agent vs My Agent:", mean_reward(evaluate("connectx", [negamax_agent, negamax_agent], num_episodes=10)))

print("My Agent vs My Agent:", mean_reward(evaluate("connectx", [evaluator_agent, "random"], num_episodes=10)))

#%% Evaluate
import matplotlib.pyplot as plt

scores = [mean_reward(evaluate("connectx", [lambda obs, config : negamax_agent(obs, config, depth), "negamax"], num_episodes=100)) for depth in range(10)]

#scores = [mean_reward(evaluate("connectx", [lambda obs, config : negamax_agent(obs, config, depth), "random"], num_episodes=10)) for depth in range(10)]

plt.plot(scores, '.-')
plt.grid()

# 
scores = [mean_reward(evaluate("connectx", [lambda obs, config : negamax_agent(obs, config, depth),  "random"], num_episodes=10)) for depth in range(11)]

plt.plot(scores, '.-')
plt.grid()


#%% Write Submission File
import inspect
import os

def write_agent_to_file(function, file):
    with open(file, "a" if os.path.exists(file) else "w") as f:
        f.write(inspect.getsource(function))
        print(function, "written to", file)

write_agent_to_file(negamax_agent, DATA_FOLDER + "submission_it_v6.py")
write_agent_to_file(negamax_agent_ex, DATA_FOLDER + "submission_it_v5_ex.py")
write_agent_to_file(random_agent, DATA_FOLDER + "submission_R_v1.py")
write_agent_to_file(random_agent_ex, DATA_FOLDER + "submission_R_v2_ex.py")

write_agent_to_file(negamax_agent_hybrid, DATA_FOLDER + "submission_HYB_v3.py")
write_agent_to_file(negamax_agent_mtd, DATA_FOLDER + "submission_MTD_v2_ex.py")

write_agent_to_file(negamax_agent_ex, DATA_FOLDER + "submission_NEG_v9_ex.py")
write_agent_to_file(negamax_agent_ex, DATA_FOLDER + "submission_NEG_v7b.py")

write_agent_to_file(negamax_agent_ex, DATA_FOLDER + "submission_NEG_v8a.py")



#%% Validate

import sys
out = sys.stdout
#submission = utils.read_file(DATA_FOLDER + "submission_7.py")
#submission = utils.read_file(DATA_FOLDER + "submission_it_v5_ex.py")
#submission = utils.read_file(DATA_FOLDER + "submission_R_v2_ex.py")
#submission = utils.read_file(DATA_FOLDER + "submission_H_v2_ex.py")
#submission = utils.read_file(DATA_FOLDER + "submission_it_plus.py")
#submission = utils.read_file(DATA_FOLDER + "submission_MTD_v2.py")
#submission = utils.read_file(DATA_FOLDER + "submission_NEG_v7d.py")
submission = utils.read_file(DATA_FOLDER + "submission_NEG_v9d.py")
#submission = utils.read_file(DATA_FOLDER + "submission_HYB_v3.py")
agent = utils.get_last_callable(submission)
sys.stdout = out

env = make("connectx", debug=True)
env.run([agent, agent])
print("Success!" if env.state[0].status == env.state[1].status == "DONE" else "Failed...")
    
#%% test cases
#Test Set (1000 test cases each)	Test Set name	nb moves	nb remaining moves
#Test_L3_R1	End-Easy	28 < moves	remaining < 14
#Test_L2_R1	Middle-Easy	14 < moves <= 28	remaining < 14
#Test_L2_R2	Middle-Medium	14 < moves <= 28	14 <= remaining < 28
#Test_L1_R1	Begin-Easy	moves <= 14	remaining < 14
#Test_L1_R2	Begin-Medium	moves <= 14	14 <= remaining < 28
#Test_L1_R3	Begin-Hard	moves <= 14	28 <= remaining

TEST_CASES_FOLDER = 'D:/Github/KaggleSandbox/connect_x/positions'
    
def read_tests(filename):
    with open(filename, "r") as f:
        lines = f.readlines()
    return [(t.split()[0], int(t.split()[1])) for t in lines]

tests1 = read_tests(TEST_CASES_FOLDER + '/Test_L3_R1') # Total evals 1112549. Total errors 0
tests2 = read_tests(TEST_CASES_FOLDER + '/Test_L2_R1') # Total evals 13329371, Total errors 66
tests3 = read_tests(TEST_CASES_FOLDER + '/Test_L2_R2')    
tests4 = read_tests(TEST_CASES_FOLDER + '/Test_L1_R1')  

def run_tests(tests, filename):
    total_evals = 0
    error_count = 0  
    with open(TEST_CASES_FOLDER + '/' + filename + '.eval.log', "w") as out_file:
        out_file.write('id,moves,score,evals,est_score,est_column,error,time, time_ratio\n')
        for i, t in enumerate(tests):
            #i, t = 0, tests_hard[0]
            mark = 1
            moves =t[0]        
            debug_out = dict()
            board = columns * rows * [0]
            mark = play_moves(moves, board, config)    
            obs = structify({'board':board, 'mark':mark})
            negamax_agent_ex(obs, config)
            #negamax_agent_mtd(obs, config)
            obs.debug['best_score'] = float('nan') if obs.debug['best_score'] is None else obs.debug['best_score']
            text = '%d, test: %s, evals: %s, solver: %f, column: %s  %s %f sec' % (i, t[1], obs.debug['evals'], obs.debug['best_score'], obs.debug['best_column'], '' if abs(t[1] - obs.debug['best_score'])<1e-6 else '[ERROR]', obs.debug['total_time'])
            print(text)
            out_file.write('%d,%s,%s,%s,%f,%s,%s,%f\n' % (i,t[0], t[1], obs.debug['evals'], obs.debug['best_score'], obs.debug['best_column'], 0 if abs(t[1] - obs.debug['best_score'])<1e-6 else 1, obs.debug['total_time']))
            total_evals += obs.debug['evals']
            error_count += 0 if abs(t[1] - obs.debug['best_score'])<1e-6 else 1
        print('Total evals %d' % total_evals)
        print('Total errors %d' % error_count)

for test_name in ['Test_L3_R1', 'Test_L2_R1', 'Test_L2_R2', 'Test_L1_R1', 'Test_L1_R2', 'Test_L1_R3']:
    test_cases = read_tests(TEST_CASES_FOLDER + '/' + test_name)
    run_tests(test_cases, test_name + '.v8')
    

run_tests(tests1, 'test1')
run_tests(tests2, 'test2')
run_tests(tests4, 'test4')

#run solved cases - there should be no errors
tests_solved = read_tests(TEST_CASES_FOLDER + '/Test_SOLVED')
run_tests(tests_solved, 'Test_SOLVED')

tests_hard = read_tests(TEST_CASES_FOLDER + '/Test_L2_R1_HARD')
run_tests(tests_hard, 'Test_L2_R1_HARD.MTD')

agent_negamax_v7(structify({'board':board, 'mark':mark}), config)
